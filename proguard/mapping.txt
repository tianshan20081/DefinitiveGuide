android.content.pm.IPackageStatsObserver -> android.a.a.a:
    void onGetStatsCompleted(android.content.pm.PackageStats,boolean) -> a
android.content.pm.IPackageStatsObserver$Stub -> android.a.a.b:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.FragmentActivity:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.h:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$2 -> android.support.v4.app.i:
    android.support.v4.app.FragmentActivity this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.j:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.k:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.l:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.m:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.n:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.o:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.p:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.q:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.s:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.t:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.u:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.v:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.w:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.x:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.y:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.z:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.aa:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ab:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ac:
android.support.v4.content.FileProvider -> android.support.v4.content.FileProvider:
    java.lang.String[] COLUMNS -> a
    java.io.File DEVICE_ROOT -> b
    java.util.HashMap sCache -> c
    android.support.v4.content.FileProvider$PathStrategy mStrategy -> d
    boolean onCreate() -> onCreate
    void attachInfo(android.content.Context,android.content.pm.ProviderInfo) -> attachInfo
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String) -> openFile
    android.support.v4.content.FileProvider$PathStrategy getPathStrategy(android.content.Context,java.lang.String) -> a
    android.support.v4.content.FileProvider$PathStrategy parsePathStrategy(android.content.Context,java.lang.String) -> b
    int modeToMode(java.lang.String) -> a
    java.io.File buildPath(java.io.File,java.lang.String[]) -> a
    java.lang.String[] copyOf(java.lang.String[],int) -> a
    java.lang.Object[] copyOf(java.lang.Object[],int) -> a
android.support.v4.content.FileProvider$PathStrategy -> android.support.v4.content.a:
    java.io.File getFileForUri(android.net.Uri) -> a
android.support.v4.content.FileProvider$SimplePathStrategy -> android.support.v4.content.b:
    java.lang.String mAuthority -> a
    java.util.HashMap mRoots -> b
    void addRoot(java.lang.String,java.io.File) -> a
    java.io.File getFileForUri(android.net.Uri) -> a
android.support.v4.content.Loader -> android.support.v4.content.c:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.content.d:
android.support.v4.os.ParcelableCompat -> android.support.v4.a.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.a.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.a.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.a.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.a.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.b.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.b.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.LruCache -> android.support.v4.b.c:
    java.util.LinkedHashMap map -> a
    int size -> b
    int maxSize -> c
    int putCount -> d
    int createCount -> e
    int evictionCount -> f
    int hitCount -> g
    int missCount -> h
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object put(java.lang.Object,java.lang.Object) -> a
    void trimToSize(int) -> a
    void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object) -> a
    java.lang.Object create(java.lang.Object) -> b
    int safeSizeOf(java.lang.Object,java.lang.Object) -> c
    int sizeOf(java.lang.Object,java.lang.Object) -> b
    java.lang.String toString() -> toString
android.support.v4.util.SparseArrayCompat -> android.support.v4.b.d:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.g:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.GravityCompat -> android.support.v4.view.n:
    android.support.v4.view.GravityCompat$GravityCompatImpl IMPL -> a
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImpl -> android.support.v4.view.o:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplBase -> android.support.v4.view.p:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompat$GravityCompatImplJellybeanMr1 -> android.support.v4.view.q:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.GravityCompatJellybeanMr1 -> android.support.v4.view.r:
    int getAbsoluteGravity(int,int) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.s:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
    void startTracking(android.view.KeyEvent) -> b
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.t:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$EclairKeyEventVersionImpl -> android.support.v4.view.u:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.v:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.w:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatEclair -> android.support.v4.view.x:
    void startTracking(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.y:
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.MotionEventCompat -> android.support.v4.view.z:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionMasked(android.view.MotionEvent) -> a
    int getActionIndex(android.view.MotionEvent) -> b
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> c
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.aa:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.ab:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.ac:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.ad:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
    int getPointerCount(android.view.MotionEvent) -> a
android.support.v4.view.PagerAdapter -> android.support.v4.view.ae:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.af:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.ag:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.ah:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ai:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.aj:
    float getXVelocity(android.view.VelocityTracker,int) -> a
    float getYVelocity(android.view.VelocityTracker,int) -> b
android.support.v4.view.ViewCompat -> android.support.v4.view.ak:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.al:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.am:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.an:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ao:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ap:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.aq:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.ar:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> d
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> e
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.as:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.at:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
    int getLayerType(android.view.View) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.au:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.av:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View,int,int,int,int) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewCompatJellybeanMr1 -> android.support.v4.view.aw:
    void setLayerPaint(android.view.View,android.graphics.Paint) -> a
    int getLayoutDirection(android.view.View) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.ax:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.ay:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.az:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.ba:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.bb:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    int mExpectedAdapterCount -> b
    java.util.Comparator COMPARATOR -> c
    android.view.animation.Interpolator sInterpolator -> d
    java.util.ArrayList mItems -> e
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> f
    android.graphics.Rect mTempRect -> g
    android.support.v4.view.PagerAdapter mAdapter -> h
    int mCurItem -> i
    int mRestoredCurItem -> j
    android.os.Parcelable mRestoredAdapterState -> k
    java.lang.ClassLoader mRestoredClassLoader -> l
    android.widget.Scroller mScroller -> m
    android.support.v4.view.ViewPager$PagerObserver mObserver -> n
    int mPageMargin -> o
    android.graphics.drawable.Drawable mMarginDrawable -> p
    int mTopPageBounds -> q
    int mBottomPageBounds -> r
    float mFirstOffset -> s
    float mLastOffset -> t
    int mChildWidthMeasureSpec -> u
    int mChildHeightMeasureSpec -> v
    boolean mInLayout -> w
    boolean mScrollingCacheEnabled -> x
    boolean mPopulatePending -> y
    int mOffscreenPageLimit -> z
    boolean mIsBeingDragged -> A
    boolean mIsUnableToDrag -> B
    int mDefaultGutterSize -> C
    int mGutterSize -> D
    int mTouchSlop -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    float mInitialMotionX -> H
    float mInitialMotionY -> I
    int mActivePointerId -> J
    android.view.VelocityTracker mVelocityTracker -> K
    int mMinimumVelocity -> L
    int mMaximumVelocity -> M
    int mFlingDistance -> N
    int mCloseEnough -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void initViewPager() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> g
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    int getClientWidth() -> getClientWidth
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    void populate(int) -> a
    void sortChildDrawingOrder() -> h
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> i
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> j
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> d
    boolean pageRight() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    void access$000(android.support.v4.view.ViewPager,int) -> a
    android.support.v4.view.PagerAdapter access$200(android.support.v4.view.ViewPager) -> a
    int access$300(android.support.v4.view.ViewPager) -> b
    int[] access$400() -> f
android.support.v4.view.ViewPager$1 -> android.support.v4.view.bc:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.bd:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$3 -> android.support.v4.view.be:
    android.support.v4.view.ViewPager this$0 -> a
    void run() -> run
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.bf:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.bg:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ViewPager$LayoutParams:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.bh:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.bi:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.bj:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.bk:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.bl:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bm:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.bn:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    java.lang.Object getInfo() -> a
    void addAction(int) -> a
    void setScrollable(boolean) -> a
    void setClassName(java.lang.CharSequence) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    void addAction(java.lang.Object,int) -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.e:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.f:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.g:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.h:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.i:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.j:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.k:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.l:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.m:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.n:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.widget.CursorAdapter -> android.support.v4.widget.a:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    void onContentChanged() -> b
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.widget.b:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.widget.c:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.widget.d:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.widget.e:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.widget.f:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.DrawerLayout -> android.support.v4.widget.DrawerLayout:
    int[] LAYOUT_ATTRS -> a
    int mMinDrawerMargin -> b
    int mScrimColor -> c
    float mScrimOpacity -> d
    android.graphics.Paint mScrimPaint -> e
    android.support.v4.widget.ViewDragHelper mLeftDragger -> f
    android.support.v4.widget.ViewDragHelper mRightDragger -> g
    android.support.v4.widget.DrawerLayout$ViewDragCallback mLeftCallback -> h
    android.support.v4.widget.DrawerLayout$ViewDragCallback mRightCallback -> i
    int mDrawerState -> j
    boolean mInLayout -> k
    boolean mFirstLayout -> l
    int mLockModeLeft -> m
    int mLockModeRight -> n
    boolean mDisallowInterceptRequested -> o
    boolean mChildrenCanceledTouch -> p
    android.support.v4.widget.DrawerLayout$DrawerListener mListener -> q
    float mInitialMotionX -> r
    float mInitialMotionY -> s
    android.graphics.drawable.Drawable mShadowLeft -> t
    android.graphics.drawable.Drawable mShadowRight -> u
    void setScrimColor(int) -> setScrimColor
    void setDrawerListener(android.support.v4.widget.DrawerLayout$DrawerListener) -> setDrawerListener
    void setDrawerLockMode(int) -> setDrawerLockMode
    void setDrawerLockMode(int,int) -> a
    int getDrawerLockMode(android.view.View) -> a
    void updateDrawerState(int,int,android.view.View) -> a
    void dispatchOnDrawerClosed(android.view.View) -> b
    void dispatchOnDrawerOpened(android.view.View) -> c
    void dispatchOnDrawerSlide(android.view.View,float) -> a
    void setDrawerViewOffset(android.view.View,float) -> b
    float getDrawerViewOffset(android.view.View) -> d
    int getDrawerViewGravity(android.view.View) -> e
    boolean checkDrawerViewGravity(android.view.View,int) -> a
    android.view.View findOpenDrawer() -> a
    android.view.View findDrawerWithGravity(int) -> a
    java.lang.String gravityToString(int) -> b
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void requestLayout() -> requestLayout
    void computeScroll() -> computeScroll
    boolean hasOpaqueBackground(android.view.View) -> k
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    boolean isContentView(android.view.View) -> f
    boolean isDrawerView(android.view.View) -> g
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void requestDisallowInterceptTouchEvent(boolean) -> requestDisallowInterceptTouchEvent
    void closeDrawers() -> b
    void closeDrawers(boolean) -> a
    void openDrawer(android.view.View) -> h
    void closeDrawer(android.view.View) -> i
    boolean isDrawerVisible(android.view.View) -> j
    boolean hasPeekingDrawer() -> d
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    boolean hasVisibleDrawer() -> e
    android.view.View findVisibleDrawer() -> f
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    int[] access$100() -> c
android.support.v4.widget.DrawerLayout$DrawerListener -> android.support.v4.widget.g:
    void onDrawerSlide(android.view.View,float) -> a
    void onDrawerOpened(android.view.View) -> a
    void onDrawerClosed(android.view.View) -> b
    void onDrawerStateChanged(int) -> a
android.support.v4.widget.DrawerLayout$LayoutParams -> android.support.v4.widget.DrawerLayout$LayoutParams:
    int gravity -> a
    float onScreen -> b
    boolean isPeeking -> c
    boolean knownOpen -> d
android.support.v4.widget.DrawerLayout$SavedState -> android.support.v4.widget.DrawerLayout$SavedState:
    int openDrawerGravity -> a
    int lockModeLeft -> b
    int lockModeRight -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.DrawerLayout$SavedState$1 -> android.support.v4.widget.h:
    android.support.v4.widget.DrawerLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.DrawerLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.DrawerLayout$ViewDragCallback -> android.support.v4.widget.i:
    int mGravity -> b
    android.support.v4.widget.ViewDragHelper mDragger -> c
    java.lang.Runnable mPeekRunnable -> d
    android.support.v4.widget.DrawerLayout this$0 -> a
    void removeCallbacks() -> a
    boolean tryCaptureView(android.view.View,int) -> a
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void closeOtherDrawer() -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getViewHorizontalDragRange(android.view.View) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.widget.j:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.widget.k:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.widget.l:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.widget.m:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.widget.n:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.widget.o:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.ScrollerCompat -> android.support.v4.widget.p:
    java.lang.Object mScroller -> a
    android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl IMPL -> b
    boolean isFinished() -> a
    int getCurrX() -> b
    int getCurrY() -> c
    int getFinalX() -> d
    int getFinalY() -> e
    boolean computeScrollOffset() -> f
    void startScroll(int,int,int,int,int) -> a
    void abortAnimation() -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImpl -> android.support.v4.widget.q:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplBase -> android.support.v4.widget.r:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplGingerbread -> android.support.v4.widget.s:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.ScrollerCompat$ScrollerCompatImplIcs -> android.support.v4.widget.t:
android.support.v4.widget.ScrollerCompatGingerbread -> android.support.v4.widget.u:
    boolean isFinished(java.lang.Object) -> a
    int getCurrX(java.lang.Object) -> b
    int getCurrY(java.lang.Object) -> c
    boolean computeScrollOffset(java.lang.Object) -> d
    void startScroll(java.lang.Object,int,int,int,int,int) -> a
    void abortAnimation(java.lang.Object) -> e
    int getFinalX(java.lang.Object) -> f
    int getFinalY(java.lang.Object) -> g
android.support.v4.widget.SimpleCursorAdapter -> android.support.v4.widget.v:
    int[] mFrom -> j
    int[] mTo -> k
    int mStringConversionColumn -> m
    android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter -> n
    android.support.v4.widget.SimpleCursorAdapter$ViewBinder mViewBinder -> o
    java.lang.String[] mOriginalFrom -> l
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void setViewImage(android.widget.ImageView,java.lang.String) -> a
    void setViewText(android.widget.TextView,java.lang.String) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    void findColumns(java.lang.String[]) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter -> android.support.v4.widget.w:
    java.lang.CharSequence convertToString(android.database.Cursor) -> a
android.support.v4.widget.SimpleCursorAdapter$ViewBinder -> android.support.v4.widget.x:
    boolean setViewValue(android.view.View,android.database.Cursor,int) -> a
android.support.v4.widget.SlidingPaneLayout -> android.support.v4.widget.SlidingPaneLayout:
    int mSliderFadeColor -> b
    int mCoveredFadeColor -> c
    android.graphics.drawable.Drawable mShadowDrawable -> d
    int mOverhangSize -> e
    boolean mCanSlide -> f
    android.view.View mSlideableView -> g
    float mSlideOffset -> h
    float mParallaxOffset -> i
    int mSlideRange -> j
    boolean mIsUnableToDrag -> k
    int mParallaxBy -> l
    float mInitialMotionX -> m
    float mInitialMotionY -> n
    android.support.v4.widget.SlidingPaneLayout$PanelSlideListener mPanelSlideListener -> o
    android.support.v4.widget.ViewDragHelper mDragHelper -> p
    boolean mPreservedOpenState -> q
    boolean mFirstLayout -> r
    android.graphics.Rect mTmpRect -> s
    java.util.ArrayList mPostedRunnables -> t
    android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl IMPL -> a
    void setParallaxDistance(int) -> setParallaxDistance
    int getParallaxDistance() -> getParallaxDistance
    void setSliderFadeColor(int) -> setSliderFadeColor
    int getSliderFadeColor() -> getSliderFadeColor
    void setCoveredFadeColor(int) -> setCoveredFadeColor
    int getCoveredFadeColor() -> getCoveredFadeColor
    void setPanelSlideListener(android.support.v4.widget.SlidingPaneLayout$PanelSlideListener) -> setPanelSlideListener
    void updateObscuredViewsVisibility(android.view.View) -> a
    void setAllChildrenVisible() -> a
    boolean hasOpaqueBackground(android.view.View) -> c
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void requestChildFocus(android.view.View,android.view.View) -> requestChildFocus
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean closePane(android.view.View,int) -> a
    boolean openPane(android.view.View,int) -> b
    boolean openPane() -> b
    boolean closePane() -> c
    boolean isOpen() -> d
    boolean isSlideable() -> e
    void dimChildView(android.view.View,float,int) -> a
    boolean drawChild(android.graphics.Canvas,android.view.View,long) -> drawChild
    void invalidateChildRegion(android.view.View) -> d
    boolean smoothSlideTo(float,int) -> a
    void computeScroll() -> computeScroll
    void setShadowDrawable(android.graphics.drawable.Drawable) -> setShadowDrawable
    void setShadowResource(int) -> setShadowResource
    void draw(android.graphics.Canvas) -> draw
    void parallaxOtherViews(float) -> a
    boolean isDimmed(android.view.View) -> b
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void access$900(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
    java.util.ArrayList access$1000(android.support.v4.widget.SlidingPaneLayout) -> a
android.support.v4.widget.SlidingPaneLayout$1 -> android.support.v4.widget.y:
android.support.v4.widget.SlidingPaneLayout$DisableLayerRunnable -> android.support.v4.widget.z:
    android.view.View mChildView -> a
    android.support.v4.widget.SlidingPaneLayout this$0 -> b
    void run() -> run
android.support.v4.widget.SlidingPaneLayout$LayoutParams -> android.support.v4.widget.SlidingPaneLayout$LayoutParams:
    int[] ATTRS -> e
    float weight -> a
    boolean slideable -> b
    boolean dimWhenOffset -> c
    android.graphics.Paint dimPaint -> d
android.support.v4.widget.SlidingPaneLayout$PanelSlideListener -> android.support.v4.widget.aa:
android.support.v4.widget.SlidingPaneLayout$SavedState -> android.support.v4.widget.SlidingPaneLayout$SavedState:
    boolean isOpen -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.widget.SlidingPaneLayout$SavedState$1 -> android.support.v4.widget.ab:
    android.support.v4.widget.SlidingPaneLayout$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.widget.SlidingPaneLayout$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImpl -> android.support.v4.widget.ac:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplBase -> android.support.v4.widget.ad:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJB -> android.support.v4.widget.ae:
    java.lang.reflect.Method mGetDisplayList -> a
    java.lang.reflect.Field mRecreateDisplayList -> b
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.SlidingPaneLayout$SlidingPanelLayoutImplJBMR1 -> android.support.v4.widget.af:
    void invalidateChildRegion(android.support.v4.widget.SlidingPaneLayout,android.view.View) -> a
android.support.v4.widget.ViewDragHelper -> android.support.v4.widget.ag:
    int mDragState -> a
    int mTouchSlop -> b
    int mActivePointerId -> c
    float[] mInitialMotionX -> d
    float[] mInitialMotionY -> e
    float[] mLastMotionX -> f
    float[] mLastMotionY -> g
    int[] mInitialEdgesTouched -> h
    int[] mEdgeDragsInProgress -> i
    int[] mEdgeDragsLocked -> j
    int mPointersDown -> k
    android.view.VelocityTracker mVelocityTracker -> l
    float mMaxVelocity -> m
    float mMinVelocity -> n
    int mEdgeSize -> o
    int mTrackingEdges -> p
    android.support.v4.widget.ScrollerCompat mScroller -> q
    android.support.v4.widget.ViewDragHelper$Callback mCallback -> r
    android.view.View mCapturedView -> s
    boolean mReleaseInProgress -> t
    android.view.ViewGroup mParentView -> u
    android.view.animation.Interpolator sInterpolator -> v
    java.lang.Runnable mSetIdleRunnable -> w
    int getViewDragState() -> a
    int getEdgeSize() -> b
    void captureChildView(android.view.View,int) -> a
    android.view.View getCapturedView() -> c
    int getTouchSlop() -> d
    void cancel() -> e
    void abort() -> f
    boolean smoothSlideViewTo(android.view.View,int,int) -> a
    boolean settleCapturedViewAt(int,int) -> a
    boolean forceSettleCapturedViewAt(int,int,int,int) -> a
    int computeSettleDuration(android.view.View,int,int,int,int) -> a
    int computeAxisDuration(int,int,int) -> a
    int clampMag(int,int,int) -> b
    float clampMag(float,float,float) -> a
    float distanceInfluenceForSnapDuration(float) -> a
    boolean continueSettling(boolean) -> a
    void dispatchViewReleased(float,float) -> a
    void clearMotionHistory() -> g
    void clearMotionHistory(int) -> e
    void ensureMotionHistorySizeForId(int) -> f
    void saveInitialMotion(float,float,int) -> a
    void saveLastMotion(android.view.MotionEvent) -> c
    boolean isPointerDown(int) -> a
    void setDragState(int) -> b
    boolean tryCaptureViewForDrag(android.view.View,int) -> b
    boolean shouldInterceptTouchEvent(android.view.MotionEvent) -> a
    void processTouchEvent(android.view.MotionEvent) -> b
    void reportNewEdgeDrags(float,float,int) -> b
    boolean checkNewEdgeDrag(float,float,int,int) -> a
    boolean checkTouchSlop(android.view.View,float,float) -> a
    boolean checkTouchSlop(int) -> c
    boolean checkTouchSlop(int,int) -> b
    boolean isEdgeTouched(int) -> d
    boolean isEdgeTouched(int,int) -> c
    void releaseViewForPointerUp() -> h
    void dragTo(int,int,int,int) -> b
    boolean isCapturedViewUnder(int,int) -> d
    boolean isViewUnder(android.view.View,int,int) -> b
    android.view.View findTopChildUnder(int,int) -> e
    int getEdgesTouched(int,int) -> f
android.support.v4.widget.ViewDragHelper$1 -> android.support.v4.widget.ah:
    float getInterpolation(float) -> getInterpolation
android.support.v4.widget.ViewDragHelper$Callback -> android.support.v4.widget.ai:
    void onViewDragStateChanged(int) -> a
    void onViewPositionChanged(android.view.View,int,int,int,int) -> a
    void onViewCaptured(android.view.View,int) -> b
    void onViewReleased(android.view.View,float,float) -> a
    void onEdgeTouched(int,int) -> a
    boolean onEdgeLock(int) -> b
    void onEdgeDragStarted(int,int) -> b
    int getOrderedChildIndex(int) -> c
    int getViewHorizontalDragRange(android.view.View) -> a
    int getViewVerticalDragRange(android.view.View) -> b
    boolean tryCaptureView(android.view.View,int) -> a
    int clampViewPositionHorizontal(android.view.View,int,int) -> a
    int clampViewPositionVertical(android.view.View,int,int) -> b
com.android.volley.AuthFailureError -> com.a.a.a:
    android.content.Intent mResolutionIntent -> b
    java.lang.String getMessage() -> getMessage
com.android.volley.Cache -> com.a.a.b:
    com.android.volley.Cache$Entry get(java.lang.String) -> a
    void put(java.lang.String,com.android.volley.Cache$Entry) -> a
    void initialize() -> a
com.android.volley.Cache$Entry -> com.a.a.c:
    byte[] data -> a
    java.lang.String etag -> b
    long serverDate -> c
    long ttl -> d
    long softTtl -> e
    java.util.Map responseHeaders -> f
    boolean isExpired() -> a
    boolean refreshNeeded() -> b
com.android.volley.CacheDispatcher -> com.a.a.d:
    boolean DEBUG -> a
    java.util.concurrent.BlockingQueue mCacheQueue -> b
    java.util.concurrent.BlockingQueue mNetworkQueue -> c
    com.android.volley.Cache mCache -> d
    com.android.volley.ResponseDelivery mDelivery -> e
    boolean mQuit -> f
    void quit() -> a
    void run() -> run
    java.util.concurrent.BlockingQueue access$0(com.android.volley.CacheDispatcher) -> a
com.android.volley.CacheDispatcher$1 -> com.a.a.e:
    com.android.volley.CacheDispatcher this$0 -> a
    com.android.volley.Request val$request -> b
    void run() -> run
com.android.volley.DefaultRetryPolicy -> com.a.a.f:
    int mCurrentTimeoutMs -> a
    int mCurrentRetryCount -> b
    int mMaxNumRetries -> c
    float mBackoffMultiplier -> d
    int getCurrentTimeout() -> a
    int getCurrentRetryCount() -> b
    void retry(com.android.volley.VolleyError) -> a
    boolean hasAttemptRemaining() -> c
com.android.volley.ExecutorDelivery -> com.a.a.g:
    java.util.concurrent.Executor mResponsePoster -> a
    void postResponse(com.android.volley.Request,com.android.volley.Response) -> a
    void postResponse(com.android.volley.Request,com.android.volley.Response,java.lang.Runnable) -> a
    void postError(com.android.volley.Request,com.android.volley.VolleyError) -> a
com.android.volley.ExecutorDelivery$1 -> com.a.a.h:
    com.android.volley.ExecutorDelivery this$0 -> a
    android.os.Handler val$handler -> b
    void execute(java.lang.Runnable) -> execute
com.android.volley.ExecutorDelivery$ResponseDeliveryRunnable -> com.a.a.i:
    com.android.volley.Request mRequest -> b
    com.android.volley.Response mResponse -> c
    java.lang.Runnable mRunnable -> d
    com.android.volley.ExecutorDelivery this$0 -> a
    void run() -> run
com.android.volley.Network -> com.a.a.j:
    com.android.volley.NetworkResponse performRequest(com.android.volley.Request) -> a
com.android.volley.NetworkDispatcher -> com.a.a.k:
    java.util.concurrent.BlockingQueue mQueue -> a
    com.android.volley.Network mNetwork -> b
    com.android.volley.Cache mCache -> c
    com.android.volley.ResponseDelivery mDelivery -> d
    boolean mQuit -> e
    void quit() -> a
    void run() -> run
    void parseAndDeliverNetworkError(com.android.volley.Request,com.android.volley.VolleyError) -> a
com.android.volley.NetworkError -> com.a.a.l:
com.android.volley.NetworkResponse -> com.a.a.m:
    int statusCode -> a
    byte[] data -> b
    java.util.Map headers -> c
    boolean notModified -> d
com.android.volley.NoConnectionError -> com.a.a.n:
com.android.volley.ParseError -> com.a.a.o:
com.android.volley.Request -> com.a.a.p:
    com.android.volley.VolleyLog$MarkerLog mEventLog -> a
    int mMethod -> b
    java.lang.String mUrl -> c
    int mDefaultTrafficStatsTag -> d
    com.android.volley.Response$ErrorListener mErrorListener -> e
    java.lang.Integer mSequence -> f
    com.android.volley.RequestQueue mRequestQueue -> g
    boolean mShouldCache -> h
    boolean mCanceled -> i
    boolean mResponseDelivered -> j
    long mRequestBirthTime -> k
    com.android.volley.RetryPolicy mRetryPolicy -> l
    com.android.volley.Cache$Entry mCacheEntry -> m
    int getMethod() -> a
    int getTrafficStatsTag() -> b
    void setRetryPolicy(com.android.volley.RetryPolicy) -> a
    void addMarker(java.lang.String) -> a
    void finish(java.lang.String) -> b
    void setRequestQueue(com.android.volley.RequestQueue) -> a
    void setSequence(int) -> a
    java.lang.String getUrl() -> c
    java.lang.String getCacheKey() -> d
    void setCacheEntry(com.android.volley.Cache$Entry) -> a
    com.android.volley.Cache$Entry getCacheEntry() -> e
    boolean isCanceled() -> f
    java.util.Map getHeaders() -> g
    java.util.Map getPostParams() -> h
    java.lang.String getPostParamsEncoding() -> i
    java.lang.String getPostBodyContentType() -> j
    byte[] getPostBody() -> k
    java.util.Map getParams() -> l
    java.lang.String getParamsEncoding() -> m
    java.lang.String getBodyContentType() -> n
    byte[] getBody() -> o
    byte[] encodeParameters(java.util.Map,java.lang.String) -> a
    boolean shouldCache() -> p
    com.android.volley.Request$Priority getPriority() -> q
    int getTimeoutMs() -> r
    com.android.volley.RetryPolicy getRetryPolicy() -> s
    void markDelivered() -> t
    boolean hasHadResponseDelivered() -> u
    com.android.volley.Response parseNetworkResponse(com.android.volley.NetworkResponse) -> a
    com.android.volley.VolleyError parseNetworkError(com.android.volley.VolleyError) -> a
    void deliverResponse(java.lang.Object) -> a
    void deliverError(com.android.volley.VolleyError) -> b
    int compareTo(com.android.volley.Request) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
    com.android.volley.VolleyLog$MarkerLog access$1(com.android.volley.Request) -> b
com.android.volley.Request$1 -> com.a.a.q:
    com.android.volley.Request this$0 -> a
    java.lang.String val$tag -> b
    long val$threadId -> c
    void run() -> run
com.android.volley.Request$Priority -> com.a.a.r:
    com.android.volley.Request$Priority LOW -> a
    com.android.volley.Request$Priority NORMAL -> b
    com.android.volley.Request$Priority HIGH -> c
    com.android.volley.Request$Priority IMMEDIATE -> d
    com.android.volley.Request$Priority[] ENUM$VALUES -> e
    com.android.volley.Request$Priority[] values() -> values
    com.android.volley.Request$Priority valueOf(java.lang.String) -> valueOf
com.android.volley.RequestQueue -> com.a.a.s:
    java.util.concurrent.atomic.AtomicInteger mSequenceGenerator -> a
    java.util.Map mWaitingRequests -> b
    java.util.Set mCurrentRequests -> c
    java.util.concurrent.PriorityBlockingQueue mCacheQueue -> d
    java.util.concurrent.PriorityBlockingQueue mNetworkQueue -> e
    com.android.volley.Cache mCache -> f
    com.android.volley.Network mNetwork -> g
    com.android.volley.ResponseDelivery mDelivery -> h
    com.android.volley.NetworkDispatcher[] mDispatchers -> i
    com.android.volley.CacheDispatcher mCacheDispatcher -> j
    void start() -> a
    void stop() -> b
    int getSequenceNumber() -> c
    com.android.volley.Request add(com.android.volley.Request) -> a
    void finish(com.android.volley.Request) -> b
com.android.volley.Response -> com.a.a.t:
    java.lang.Object result -> a
    com.android.volley.Cache$Entry cacheEntry -> b
    com.android.volley.VolleyError error -> c
    boolean intermediate -> d
    com.android.volley.Response success(java.lang.Object,com.android.volley.Cache$Entry) -> a
    com.android.volley.Response error(com.android.volley.VolleyError) -> a
    boolean isSuccess() -> a
com.android.volley.Response$ErrorListener -> com.a.a.u:
    void onErrorResponse(com.android.volley.VolleyError) -> a
com.android.volley.Response$Listener -> com.a.a.v:
    void onResponse(java.lang.Object) -> a
com.android.volley.ResponseDelivery -> com.a.a.w:
    void postResponse(com.android.volley.Request,com.android.volley.Response) -> a
    void postResponse(com.android.volley.Request,com.android.volley.Response,java.lang.Runnable) -> a
    void postError(com.android.volley.Request,com.android.volley.VolleyError) -> a
com.android.volley.RetryPolicy -> com.a.a.x:
    int getCurrentTimeout() -> a
    int getCurrentRetryCount() -> b
    void retry(com.android.volley.VolleyError) -> a
com.android.volley.ServerError -> com.a.a.y:
com.android.volley.TimeoutError -> com.a.a.z:
com.android.volley.VolleyError -> com.a.a.aa:
    com.android.volley.NetworkResponse networkResponse -> a
com.android.volley.VolleyLog -> com.a.a.ab:
    java.lang.String TAG -> a
    boolean DEBUG -> b
    void v(java.lang.String,java.lang.Object[]) -> a
    void d(java.lang.String,java.lang.Object[]) -> b
    void e(java.lang.String,java.lang.Object[]) -> c
    void e(java.lang.Throwable,java.lang.String,java.lang.Object[]) -> a
    void wtf(java.lang.String,java.lang.Object[]) -> d
    java.lang.String buildMessage(java.lang.String,java.lang.Object[]) -> e
com.android.volley.VolleyLog$MarkerLog -> com.a.a.ac:
    boolean ENABLED -> a
    java.util.List mMarkers -> b
    boolean mFinished -> c
    void add(java.lang.String,long) -> a
    void finish(java.lang.String) -> a
    void finalize() -> finalize
    long getTotalDuration() -> a
com.android.volley.VolleyLog$MarkerLog$Marker -> com.a.a.ad:
    java.lang.String name -> a
    long thread -> b
    long time -> c
com.android.volley.toolbox.BasicNetwork -> com.a.a.a.a:
    boolean DEBUG -> a
    int SLOW_REQUEST_THRESHOLD_MS -> d
    int DEFAULT_POOL_SIZE -> e
    com.android.volley.toolbox.HttpStack mHttpStack -> b
    com.android.volley.toolbox.ByteArrayPool mPool -> c
    com.android.volley.NetworkResponse performRequest(com.android.volley.Request) -> a
    void logSlowRequests(long,com.android.volley.Request,byte[],org.apache.http.StatusLine) -> a
    void attemptRetryOnException(java.lang.String,com.android.volley.Request,com.android.volley.VolleyError) -> a
    void addCacheHeaders(java.util.Map,com.android.volley.Cache$Entry) -> a
    byte[] entityToBytes(org.apache.http.HttpEntity) -> a
    java.util.Map convertHeaders(org.apache.http.Header[]) -> a
com.android.volley.toolbox.ByteArrayPool -> com.a.a.a.b:
    java.util.List mBuffersByLastUse -> b
    java.util.List mBuffersBySize -> c
    int mCurrentSize -> d
    int mSizeLimit -> e
    java.util.Comparator BUF_COMPARATOR -> a
    byte[] getBuf(int) -> a
    void returnBuf(byte[]) -> a
    void trim() -> a
com.android.volley.toolbox.ByteArrayPool$1 -> com.a.a.a.c:
    int compare(byte[],byte[]) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.android.volley.toolbox.DiskBasedCache -> com.a.a.a.d:
    java.util.Map mEntries -> a
    long mTotalSize -> b
    java.io.File mRootDirectory -> c
    int mMaxCacheSizeInBytes -> d
    com.android.volley.Cache$Entry get(java.lang.String) -> a
    void initialize() -> a
    void put(java.lang.String,com.android.volley.Cache$Entry) -> a
    void remove(java.lang.String) -> b
    java.lang.String getFilenameForKey(java.lang.String) -> d
    java.io.File getFileForKey(java.lang.String) -> c
    void pruneIfNeeded(int) -> a
    void putEntry(java.lang.String,com.android.volley.toolbox.DiskBasedCache$CacheHeader) -> a
    void removeEntry(java.lang.String) -> e
    byte[] streamToBytes(java.io.InputStream,int) -> a
    int read(java.io.InputStream) -> e
    void writeInt(java.io.OutputStream,int) -> a
    int readInt(java.io.InputStream) -> a
    void writeLong(java.io.OutputStream,long) -> a
    long readLong(java.io.InputStream) -> b
    void writeString(java.io.OutputStream,java.lang.String) -> a
    java.lang.String readString(java.io.InputStream) -> c
    void writeStringStringMap(java.util.Map,java.io.OutputStream) -> a
    java.util.Map readStringStringMap(java.io.InputStream) -> d
com.android.volley.toolbox.DiskBasedCache$CacheHeader -> com.a.a.a.e:
    long size -> a
    java.lang.String key -> b
    java.lang.String etag -> c
    long serverDate -> d
    long ttl -> e
    long softTtl -> f
    java.util.Map responseHeaders -> g
    com.android.volley.toolbox.DiskBasedCache$CacheHeader readHeader(java.io.InputStream) -> a
    com.android.volley.Cache$Entry toCacheEntry(byte[]) -> a
    boolean writeHeader(java.io.OutputStream) -> a
com.android.volley.toolbox.DiskBasedCache$CountingInputStream -> com.a.a.a.f:
    int bytesRead -> a
    int read() -> read
    int read(byte[],int,int) -> read
    int access$1(com.android.volley.toolbox.DiskBasedCache$CountingInputStream) -> a
com.android.volley.toolbox.HttpClientStack -> com.a.a.a.g:
    org.apache.http.client.HttpClient mClient -> a
    void addHeaders(org.apache.http.client.methods.HttpUriRequest,java.util.Map) -> a
    org.apache.http.HttpResponse performRequest(com.android.volley.Request,java.util.Map) -> a
    org.apache.http.client.methods.HttpUriRequest createHttpRequest(com.android.volley.Request,java.util.Map) -> b
    void setEntityIfNonEmptyBody(org.apache.http.client.methods.HttpEntityEnclosingRequestBase,com.android.volley.Request) -> a
    void onPrepareRequest(org.apache.http.client.methods.HttpUriRequest) -> a
com.android.volley.toolbox.HttpClientStack$HttpPatch -> com.a.a.a.h:
    java.lang.String getMethod() -> getMethod
com.android.volley.toolbox.HttpHeaderParser -> com.a.a.a.i:
    com.android.volley.Cache$Entry parseCacheHeaders(com.android.volley.NetworkResponse) -> a
    long parseDateAsEpoch(java.lang.String) -> a
    java.lang.String parseCharset(java.util.Map) -> a
com.android.volley.toolbox.HttpStack -> com.a.a.a.j:
    org.apache.http.HttpResponse performRequest(com.android.volley.Request,java.util.Map) -> a
com.android.volley.toolbox.HurlStack -> com.a.a.a.k:
    com.android.volley.toolbox.HurlStack$UrlRewriter mUrlRewriter -> a
    javax.net.ssl.SSLSocketFactory mSslSocketFactory -> b
    org.apache.http.HttpResponse performRequest(com.android.volley.Request,java.util.Map) -> a
    org.apache.http.HttpEntity entityFromConnection(java.net.HttpURLConnection) -> a
    java.net.HttpURLConnection createConnection(java.net.URL) -> a
    java.net.HttpURLConnection openConnection(java.net.URL,com.android.volley.Request) -> a
    void setConnectionParametersForRequest(java.net.HttpURLConnection,com.android.volley.Request) -> a
    void addBodyIfExists(java.net.HttpURLConnection,com.android.volley.Request) -> b
com.android.volley.toolbox.HurlStack$UrlRewriter -> com.a.a.a.l:
    java.lang.String rewriteUrl(java.lang.String) -> a
com.android.volley.toolbox.JsonObjectRequest -> com.a.a.a.m:
    com.android.volley.Response parseNetworkResponse(com.android.volley.NetworkResponse) -> a
com.android.volley.toolbox.JsonRequest -> com.a.a.a.n:
    java.lang.String PROTOCOL_CONTENT_TYPE -> a
    com.android.volley.Response$Listener mListener -> b
    java.lang.String mRequestBody -> c
    void deliverResponse(java.lang.Object) -> a
    java.lang.String getPostBodyContentType() -> j
    byte[] getPostBody() -> k
    java.lang.String getBodyContentType() -> n
    byte[] getBody() -> o
com.android.volley.toolbox.PoolingByteArrayOutputStream -> com.a.a.a.o:
    com.android.volley.toolbox.ByteArrayPool mPool -> a
    void close() -> close
    void finalize() -> finalize
    void expand(int) -> a
    void write(byte[],int,int) -> write
    void write(int) -> write
com.android.volley.toolbox.Volley -> com.a.a.a.p:
    com.android.volley.RequestQueue newRequestQueue(android.content.Context,com.android.volley.toolbox.HttpStack) -> a
    com.android.volley.RequestQueue newRequestQueue(android.content.Context) -> a
com.aoeng.degu.R -> com.aoeng.degu.a:
com.aoeng.degu.R$styleable -> com.aoeng.degu.b:
    int[] CircleImageView -> CircleImageView
    int CircleImageView_border_color -> CircleImageView_border_color
    int CircleImageView_border_width -> CircleImageView_border_width
    int[] CustomShapeImageView -> CustomShapeImageView
    int CustomShapeImageView_shape -> CustomShapeImageView_shape
    int CustomShapeImageView_svg_raw_resource -> CustomShapeImageView_svg_raw_resource
com.aoeng.degu.adapter.ContactAdapter -> com.aoeng.degu.a.a:
    int resource -> a
    android.widget.SectionIndexer mIndexer -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setIndex(android.widget.SectionIndexer) -> a
com.aoeng.degu.adapter.ListViewAdapter -> com.aoeng.degu.a.b:
    int count -> a
    android.content.Context context -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aoeng.degu.adapter.PhotoWallAdapter -> com.aoeng.degu.a.c:
    java.lang.String TAG -> a
    java.util.Set taskCollection -> b
    android.support.v4.util.LruCache mMemoryCache -> c
    android.widget.GridView mPhotoWall -> d
    int mFirstVisiableItem -> e
    int mVisiableItemCount -> f
    boolean isFirstEnter -> g
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setImageView(java.lang.String,android.widget.ImageView) -> a
    void addBitmapToMemoryCache(java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBitmapFromMemoryCache(java.lang.String) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void cancelAllTasks() -> a
    void loadBitmaps(int,int) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    android.widget.GridView access$0(com.aoeng.degu.adapter.PhotoWallAdapter) -> a
    java.util.Set access$1(com.aoeng.degu.adapter.PhotoWallAdapter) -> b
com.aoeng.degu.adapter.PhotoWallAdapter$1 -> com.aoeng.degu.a.d:
    com.aoeng.degu.adapter.PhotoWallAdapter this$0 -> a
    int sizeOf(java.lang.String,android.graphics.Bitmap) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> b
com.aoeng.degu.adapter.PhotoWallAdapter$BitmapWorkerTask -> com.aoeng.degu.a.e:
    java.lang.String imageUrl -> b
    com.aoeng.degu.adapter.PhotoWallAdapter this$0 -> a
    android.graphics.Bitmap doInBackground(java.lang.String[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    android.graphics.Bitmap downloadBitmap(java.lang.String) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.adapter.PhotoWallTwoCacheAdapter -> com.aoeng.degu.a.f:
    android.content.Context context -> a
    java.lang.String[] urls -> b
    com.aoeng.degu.utils.cv.TwoCacheImageLoader imageLoader -> c
    boolean mbusy -> d
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setFlagBusy(boolean) -> a
com.aoeng.degu.adapter.SmsAdapter -> com.aoeng.degu.a.g:
    android.view.LayoutInflater layoutInflater -> a
    android.widget.TextView tvPhoneNO -> b
    android.widget.TextView tvSmsInfo -> c
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> newView
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> bindView
com.aoeng.degu.aidl.AidlService -> com.aoeng.degu.aidl.AidlService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
com.aoeng.degu.aidl.AidlService$AidlServiceImpl -> com.aoeng.degu.aidl.a:
    com.aoeng.degu.aidl.AidlService this$0 -> a
    java.lang.String getValue() -> a
com.aoeng.degu.aidl.IMyService -> com.aoeng.degu.aidl.b:
    java.lang.String getValue() -> a
com.aoeng.degu.aidl.IMyService$Stub -> com.aoeng.degu.aidl.c:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.aoeng.degu.aidl.IProductService -> com.aoeng.degu.aidl.d:
    java.util.Map getMap(java.lang.String,com.aoeng.degu.aidl.Product) -> a
    com.aoeng.degu.aidl.Product getProduct() -> a
com.aoeng.degu.aidl.IProductService$Stub -> com.aoeng.degu.aidl.e:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.aoeng.degu.aidl.Product -> com.aoeng.degu.aidl.Product:
    int id -> a
    java.lang.String name -> b
    float price -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void readFromParcel(android.os.Parcel) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int getId() -> a
    void setId(int) -> a
    java.lang.String getName() -> b
    void setName(java.lang.String) -> a
    float getPrice() -> c
    void setPrice(float) -> a
    java.lang.String toString() -> toString
com.aoeng.degu.aidl.Product$1 -> com.aoeng.degu.aidl.f:
    com.aoeng.degu.aidl.Product[] newArray(int) -> a
    com.aoeng.degu.aidl.Product createFromParcel(android.os.Parcel) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.aoeng.degu.aidl.ProductService -> com.aoeng.degu.aidl.ProductService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
com.aoeng.degu.aidl.ProductService$ProductServiceImpl -> com.aoeng.degu.aidl.g:
    com.aoeng.degu.aidl.ProductService this$0 -> a
    java.util.Map getMap(java.lang.String,com.aoeng.degu.aidl.Product) -> a
    com.aoeng.degu.aidl.Product getProduct() -> a
com.aoeng.degu.application.DGApplication -> com.aoeng.degu.application.DGApplication:
    java.lang.String cacheDir -> a
    java.util.List records -> b
    void onCreate() -> onCreate
    void initCacheDirPath() -> b
    void addActvity(android.app.Activity) -> a
    void removeActvity(android.app.Activity) -> b
    int getCurrentActivitySize() -> a
com.aoeng.degu.contentprovider.RegionContentProvider -> com.aoeng.degu.contentprovider.RegionContentProvider:
    android.content.UriMatcher uriMatcher -> a
    android.database.sqlite.SQLiteDatabase database -> b
    android.database.sqlite.SQLiteDatabase openDatabase() -> a
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
com.aoeng.degu.cusor.adapter.DBServices -> com.aoeng.degu.b.a.a:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    android.database.Cursor query(java.lang.String,java.lang.String[]) -> a
com.aoeng.degu.domain.AppInfo -> com.aoeng.degu.c.a:
    java.lang.String name -> a
    java.lang.String packageName -> b
    java.lang.String label -> c
    android.graphics.drawable.Drawable icon -> d
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    java.lang.String getPackageName() -> b
    void setPackageName(java.lang.String) -> b
    java.lang.String getLabel() -> c
    void setLabel(java.lang.String) -> c
    android.graphics.drawable.Drawable getIcon() -> d
    void setIcon(android.graphics.drawable.Drawable) -> a
    java.lang.String toString() -> toString
com.aoeng.degu.domain.Contact -> com.aoeng.degu.c.b:
    java.lang.String name -> a
    java.lang.String sortKey -> b
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    java.lang.String getSortKey() -> b
    void setSortKey(java.lang.String) -> b
    java.lang.String toString() -> toString
com.aoeng.degu.domain.Group -> com.aoeng.degu.c.c:
    java.lang.String title -> a
    java.lang.String getTitle() -> a
    void setTitle(java.lang.String) -> a
com.aoeng.degu.domain.People -> com.aoeng.degu.c.d:
    java.lang.String name -> a
    int age -> b
    java.lang.String address -> c
    java.lang.String getName() -> a
    void setName(java.lang.String) -> a
    int getAge() -> b
    void setAge(int) -> a
    java.lang.String getAddress() -> c
    void setAddress(java.lang.String) -> b
com.aoeng.degu.domain.Person -> com.aoeng.degu.c.e:
    java.lang.String name -> a
    int age -> b
    boolean sex -> c
    char ch -> d
    java.util.Date birthDay -> e
    java.lang.String icon -> f
    java.lang.String getIcon() -> a
    void setIcon(java.lang.String) -> a
    void setName(java.lang.String) -> b
    void setSex(boolean) -> a
    void setCh(char) -> a
    void setBirthDay(java.util.Date) -> a
    java.lang.String toString() -> toString
com.aoeng.degu.receiver.CustomerReceiver -> com.aoeng.degu.receiver.CustomerReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aoeng.degu.receiver.InCallReceiver -> com.aoeng.degu.receiver.InCallReceiver:
    java.lang.Object obj -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    void closeToast() -> a
    void showToast(android.content.Context,java.lang.String) -> a
com.aoeng.degu.receiver.OutCallReceiver -> com.aoeng.degu.receiver.OutCallReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aoeng.degu.receiver.ReceiverUI -> com.aoeng.degu.receiver.ReceiverUI:
    com.aoeng.degu.receiver.ShortMessageReceiver messageReceiver -> a
    com.aoeng.degu.receiver.ScreenOnOffReceiver screenOnOffReceiver -> b
    android.widget.TextView tvBatteryInfo -> c
    com.aoeng.degu.receiver.CustomerReceiver customerReceiver -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    android.widget.TextView access$0(com.aoeng.degu.receiver.ReceiverUI) -> a
com.aoeng.degu.receiver.ReceiverUI$BatteryReceiver -> com.aoeng.degu.receiver.a:
    com.aoeng.degu.receiver.ReceiverUI this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aoeng.degu.receiver.ScreenOnOffReceiver -> com.aoeng.degu.receiver.ScreenOnOffReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aoeng.degu.receiver.ShortMessageReceiver -> com.aoeng.degu.receiver.ShortMessageReceiver:
    java.lang.String TAG -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aoeng.degu.receiver.StartUpReceiver -> com.aoeng.degu.receiver.StartUpReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.aoeng.degu.services.BaseServices -> com.aoeng.degu.services.BaseServices:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
    void onRebind(android.content.Intent) -> onRebind
    void onDestroy() -> onDestroy
    boolean onUnbind(android.content.Intent) -> onUnbind
com.aoeng.degu.services.BindServices -> com.aoeng.degu.services.BindServices:
    com.aoeng.degu.services.BindServices$MyBinder myBinder -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onStart(android.content.Intent,int) -> onStart
    void onRebind(android.content.Intent) -> onRebind
    void onDestroy() -> onDestroy
    boolean onUnbind(android.content.Intent) -> onUnbind
com.aoeng.degu.services.BindServices$MyBinder -> com.aoeng.degu.services.a:
    com.aoeng.degu.services.BindServices this$0 -> a
    com.aoeng.degu.services.BindServices getServices() -> a
com.aoeng.degu.ui.BaseUI -> com.aoeng.degu.ui.BaseUI:
    java.lang.String TAG -> a
    android.widget.LinearLayout fmContent -> d
    com.aoeng.degu.application.DGApplication application -> e
    java.util.List record -> b
    com.aoeng.degu.utils.ThreadPoolManager threadPoolManager -> f
    android.view.View inflate -> g
    android.content.Context context -> c
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> e
    int position(int) -> b
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    android.view.View findView(int) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void loadViewLayout() -> a
    void findViewById() -> b
    void setListener() -> c
    void processLogic() -> d
    void onDestroy() -> onDestroy
    void toast(java.lang.String) -> a
com.aoeng.degu.ui.Chapter1UI -> com.aoeng.degu.ui.Chapter1UI:
    com.aoeng.degu.views.CircleCanvasView mCircleCanvas -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onClick_DrawRandomCircle(android.view.View) -> onClick_DrawRandomCircle
    void onClick_Clear(android.view.View) -> onClick_Clear
com.aoeng.degu.ui.CustomerViewUI -> com.aoeng.degu.ui.CustomerViewUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.DataSaveUI -> com.aoeng.degu.ui.DataSaveUI:
    android.widget.EditText etDataInfo -> a
    android.content.SharedPreferences simpleDataSp -> b
    android.content.SharedPreferences$Editor simpleDataEditor -> c
    java.lang.String imgBase64Str -> d
    android.widget.ImageView imageView -> e
    java.lang.String personBase64Str -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.FileCompressionUI -> com.aoeng.degu.ui.FileCompressionUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void log(java.lang.String) -> a
com.aoeng.degu.ui.FileSaveDataSDUI -> com.aoeng.degu.ui.FileSaveDataSDUI:
    android.widget.ImageView imPic -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.FileSaveDataUI -> com.aoeng.degu.ui.FileSaveDataUI:
    android.widget.EditText etDataInfo -> a
    android.widget.TextView tvDataInfo -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.FrameUI -> com.aoeng.degu.ui.FrameUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.HomeUI -> com.aoeng.degu.ui.HomeUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.LocationsUI -> com.aoeng.degu.ui.LocationsUI:
    android.widget.TextView tvLocationInfo -> a
    com.baidu.location.LocationClient mLocationClient -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void loadLocation() -> a
    android.location.Location getLocationProvider(android.location.LocationManager) -> a
    com.baidu.location.LocationClient access$0(com.aoeng.degu.ui.LocationsUI) -> a
    android.widget.TextView access$1(com.aoeng.degu.ui.LocationsUI) -> b
com.aoeng.degu.ui.LocationsUI$1 -> com.aoeng.degu.ui.a:
    com.aoeng.degu.ui.LocationsUI this$0 -> a
    void onReceiveLocation(com.baidu.location.BDLocation) -> a
    void onReceivePoi(com.baidu.location.BDLocation) -> b
com.aoeng.degu.ui.MergeView -> com.aoeng.degu.ui.MergeView:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.PreferenceUI -> com.aoeng.degu.ui.PreferenceUI:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference) -> onPreferenceTreeClick
    boolean onPreferenceChange(android.preference.Preference,java.lang.Object) -> onPreferenceChange
com.aoeng.degu.ui.SqlLiteDBUI -> com.aoeng.degu.ui.SqlLiteDBUI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.WidgetUI -> com.aoeng.degu.ui.WidgetUI:
    android.widget.TextView tv02 -> a
    android.widget.TextView tv01 -> b
    android.widget.TextView tv03 -> c
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.apps.AllAppUI -> com.aoeng.degu.ui.apps.AllAppUI:
    java.lang.String TAG -> a
    android.widget.ListView lvAllApps -> b
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.apps.AllAppUI$AppInfoAdapter -> com.aoeng.degu.ui.apps.a:
    android.content.Context context -> b
    java.util.List infos -> c
    com.aoeng.degu.ui.apps.AllAppUI this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aoeng.degu.ui.apps.AllAppUI$ViewHolder -> com.aoeng.degu.ui.apps.b:
    android.widget.TextView tvName -> a
    android.widget.TextView tvPackageName -> b
    android.widget.TextView tvLable -> c
    android.widget.ImageView imIcon -> d
com.aoeng.degu.ui.apps.AppManagerUI -> com.aoeng.degu.ui.apps.AppManagerUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.apps.AppSizeUI -> com.aoeng.degu.ui.apps.AppSizeUI:
    java.lang.String TAG -> a
    android.widget.ListView listview -> b
    java.util.ArrayList mlistAppInfo -> c
    long cachesize -> d
    long datasize -> e
    long codesize -> f
    long totalsize -> g
    android.view.LayoutInflater infater -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void queryPacakgeSize(java.lang.String) -> a
    java.lang.String formateFileSize(long) -> a
    void queryAppInfo() -> a
    void access$0(com.aoeng.degu.ui.apps.AppSizeUI,long) -> a
    void access$1(com.aoeng.degu.ui.apps.AppSizeUI,long) -> b
    void access$2(com.aoeng.degu.ui.apps.AppSizeUI,long) -> c
    long access$3(com.aoeng.degu.ui.apps.AppSizeUI) -> a
    long access$4(com.aoeng.degu.ui.apps.AppSizeUI) -> b
    long access$5(com.aoeng.degu.ui.apps.AppSizeUI) -> c
    void access$6(com.aoeng.degu.ui.apps.AppSizeUI,long) -> d
    java.lang.String access$7() -> b
com.aoeng.degu.ui.apps.AppSizeUI$1 -> com.aoeng.degu.ui.apps.c:
    com.aoeng.degu.ui.apps.AppSizeUI this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.aoeng.degu.ui.apps.AppSizeUI$AppInfo -> com.aoeng.degu.ui.apps.d:
    java.lang.String appLabel -> b
    android.graphics.drawable.Drawable appIcon -> c
    android.content.Intent intent -> d
    java.lang.String pkgName -> e
    com.aoeng.degu.ui.apps.AppSizeUI this$0 -> a
    java.lang.String getAppLabel() -> a
    void setAppLabel(java.lang.String) -> a
    android.graphics.drawable.Drawable getAppIcon() -> b
    void setAppIcon(android.graphics.drawable.Drawable) -> a
    void setIntent(android.content.Intent) -> a
    java.lang.String getPkgName() -> c
    void setPkgName(java.lang.String) -> b
com.aoeng.degu.ui.apps.AppSizeUI$BrowseApplicationInfoAdapter -> com.aoeng.degu.ui.apps.e:
    java.util.List mlistAppInfo -> c
    android.view.LayoutInflater infater -> a
    com.aoeng.degu.ui.apps.AppSizeUI this$0 -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aoeng.degu.ui.apps.AppSizeUI$BrowseApplicationInfoAdapter$ViewHolder -> com.aoeng.degu.ui.apps.f:
    android.widget.ImageView appIcon -> a
    android.widget.TextView tvAppLabel -> b
    android.widget.TextView tvPkgName -> c
    com.aoeng.degu.ui.apps.AppSizeUI$BrowseApplicationInfoAdapter this$1 -> d
com.aoeng.degu.ui.apps.AppSizeUI$PkgSizeObserver -> com.aoeng.degu.ui.apps.g:
    com.aoeng.degu.ui.apps.AppSizeUI this$0 -> a
    void onGetStatsCompleted(android.content.pm.PackageStats,boolean) -> a
com.aoeng.degu.ui.apps.SysAppsUI -> com.aoeng.degu.ui.apps.SysAppsUI:
    java.lang.String TAG -> a
    android.widget.ListView lvSysApps -> b
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.apps.SysAppsUI$AppInfoAdapter -> com.aoeng.degu.ui.apps.h:
    android.content.Context context -> b
    java.util.List infos -> c
    com.aoeng.degu.ui.apps.SysAppsUI this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aoeng.degu.ui.apps.SysAppsUI$ViewHolder -> com.aoeng.degu.ui.apps.i:
    android.widget.TextView tvName -> a
    android.widget.TextView tvPackageName -> b
    android.widget.TextView tvLable -> c
    android.widget.ImageView imIcon -> d
com.aoeng.degu.ui.cd.CoordinatesUI -> com.aoeng.degu.ui.cd.CoordinatesUI:
    java.lang.String TAG -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cp.ContentProviderUI -> com.aoeng.degu.ui.cp.ContentProviderUI:
    android.widget.ListView lvContectsInfo -> a
    android.database.Cursor cursor -> b
    android.content.ContentResolver contentResolver -> c
    android.support.v4.widget.SimpleCursorAdapter simpleCursorAdapter -> d
    android.net.Uri uri -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cv.BidirSlidingUI -> com.aoeng.degu.ui.cv.BidirSlidingUI:
    com.aoeng.degu.ui.cv.views.BidirSlidingView bidirSldingLayout -> a
    android.widget.ListView contentList -> b
    android.widget.ArrayAdapter contentListAdapter -> c
    java.lang.String[] contentItems -> d
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.BigImageShowerUI -> com.aoeng.degu.ui.cv.BigImageShowerUI:
    com.aoeng.degu.utils.cv.BigImageLoadingDialog imageLoadingDialog -> a
    android.widget.ImageView ivImageBig -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    com.aoeng.degu.utils.cv.BigImageLoadingDialog access$0(com.aoeng.degu.ui.cv.BigImageShowerUI) -> a
    android.widget.ImageView access$1(com.aoeng.degu.ui.cv.BigImageShowerUI) -> b
com.aoeng.degu.ui.cv.BigImageShowerUI$1 -> com.aoeng.degu.ui.cv.a:
    android.graphics.Bitmap bitmap -> b
    java.io.InputStream stream -> c
    com.aoeng.degu.ui.cv.BigImageShowerUI this$0 -> a
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.ui.cv.Contacts2UI -> com.aoeng.degu.ui.cv.Contacts2UI:
    android.widget.LinearLayout titleLayout -> a
    android.widget.RelativeLayout sectionToastLayout -> b
    android.widget.Button alphabetButton -> c
    android.widget.TextView title -> d
    android.widget.TextView sectionToastText -> e
    android.widget.ListView contactsListView -> f
    com.aoeng.degu.adapter.ContactAdapter adapter -> g
    android.widget.AlphabetIndexer indexer -> h
    java.util.List contacts -> i
    java.lang.String alphabet -> j
    int lastFirstVisiableItem -> k
    void onCreate(android.os.Bundle) -> onCreate
    void setAlpabetListener() -> a
    void setupContactListView() -> b
    java.lang.String getSortKey(java.lang.String) -> a
    android.widget.Button access$0(com.aoeng.degu.ui.cv.Contacts2UI) -> a
    java.lang.String access$1(com.aoeng.degu.ui.cv.Contacts2UI) -> b
    android.widget.AlphabetIndexer access$2(com.aoeng.degu.ui.cv.Contacts2UI) -> c
    android.widget.RelativeLayout access$3(com.aoeng.degu.ui.cv.Contacts2UI) -> d
    android.widget.TextView access$4(com.aoeng.degu.ui.cv.Contacts2UI) -> e
    android.widget.ListView access$5(com.aoeng.degu.ui.cv.Contacts2UI) -> f
    int access$6(com.aoeng.degu.ui.cv.Contacts2UI) -> g
    android.widget.LinearLayout access$7(com.aoeng.degu.ui.cv.Contacts2UI) -> h
    android.widget.TextView access$8(com.aoeng.degu.ui.cv.Contacts2UI) -> i
    void access$9(com.aoeng.degu.ui.cv.Contacts2UI,int) -> a
com.aoeng.degu.ui.cv.Contacts2UI$1 -> com.aoeng.degu.ui.cv.b:
    com.aoeng.degu.ui.cv.Contacts2UI this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
com.aoeng.degu.ui.cv.Contacts2UI$2 -> com.aoeng.degu.ui.cv.c:
    com.aoeng.degu.ui.cv.Contacts2UI this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.aoeng.degu.ui.cv.ContactsUI -> com.aoeng.degu.ui.cv.ContactsUI:
    android.widget.LinearLayout titleLayout -> a
    android.widget.TextView title -> b
    android.widget.ListView contactsListView -> c
    com.aoeng.degu.adapter.ContactAdapter adapter -> d
    android.widget.AlphabetIndexer indexer -> e
    java.util.List contacts -> f
    java.lang.String alphabet -> g
    int lastFirstVisiableItem -> h
    void onCreate(android.os.Bundle) -> onCreate
    void setupContactsListView() -> a
    java.lang.String getSortKey(java.lang.String) -> a
    android.widget.AlphabetIndexer access$0(com.aoeng.degu.ui.cv.ContactsUI) -> a
    int access$1(com.aoeng.degu.ui.cv.ContactsUI) -> b
    android.widget.LinearLayout access$2(com.aoeng.degu.ui.cv.ContactsUI) -> c
    android.widget.TextView access$3(com.aoeng.degu.ui.cv.ContactsUI) -> d
    java.lang.String access$4(com.aoeng.degu.ui.cv.ContactsUI) -> e
    void access$5(com.aoeng.degu.ui.cv.ContactsUI,int) -> a
com.aoeng.degu.ui.cv.ContactsUI$1 -> com.aoeng.degu.ui.cv.d:
    com.aoeng.degu.ui.cv.ContactsUI this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.aoeng.degu.ui.cv.FourView -> com.aoeng.degu.ui.cv.FourView:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.OneView -> com.aoeng.degu.ui.cv.OneView:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.PhotoSmall2BigUI -> com.aoeng.degu.ui.cv.PhotoSmall2BigUI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.PhotoSmall2BigUI$1 -> com.aoeng.degu.ui.cv.e:
    com.aoeng.degu.ui.cv.PhotoSmall2BigUI this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cv.PhotoWall2CacheUI -> com.aoeng.degu.ui.cv.PhotoWall2CacheUI:
    android.widget.ListView lvPhotoWall2Cache -> a
    com.aoeng.degu.adapter.PhotoWallTwoCacheAdapter adapter -> b
    void onCreate(android.os.Bundle) -> onCreate
    com.aoeng.degu.adapter.PhotoWallTwoCacheAdapter access$0(com.aoeng.degu.ui.cv.PhotoWall2CacheUI) -> a
com.aoeng.degu.ui.cv.PhotoWall2CacheUI$1 -> com.aoeng.degu.ui.cv.f:
    com.aoeng.degu.ui.cv.PhotoWall2CacheUI this$0 -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.aoeng.degu.ui.cv.PhotoWallUI -> com.aoeng.degu.ui.cv.PhotoWallUI:
    android.widget.GridView mPhotoWall -> a
    com.aoeng.degu.adapter.PhotoWallAdapter adapter -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
com.aoeng.degu.ui.cv.PhotoWaterFallUI -> com.aoeng.degu.ui.cv.PhotoWaterFallUI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.TabsByGroupUI -> com.aoeng.degu.ui.cv.TabsByGroupUI:
    android.widget.LinearLayout bodyView -> a
    android.widget.LinearLayout headview -> b
    android.widget.LinearLayout one -> c
    android.widget.LinearLayout two -> d
    android.widget.LinearLayout three -> e
    android.widget.LinearLayout four -> f
    int flag -> g
    void onCreate(android.os.Bundle) -> onCreate
    void initMainView() -> a
    void showView(int) -> a
    void access$0(com.aoeng.degu.ui.cv.TabsByGroupUI,int) -> a
    int access$1(com.aoeng.degu.ui.cv.TabsByGroupUI) -> a
com.aoeng.degu.ui.cv.TabsByGroupUI$1 -> com.aoeng.degu.ui.cv.g:
    com.aoeng.degu.ui.cv.TabsByGroupUI this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cv.TabsByGroupUI$2 -> com.aoeng.degu.ui.cv.h:
    com.aoeng.degu.ui.cv.TabsByGroupUI this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cv.TabsByGroupUI$3 -> com.aoeng.degu.ui.cv.i:
    com.aoeng.degu.ui.cv.TabsByGroupUI this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cv.TabsByGroupUI$4 -> com.aoeng.degu.ui.cv.j:
    com.aoeng.degu.ui.cv.TabsByGroupUI this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.cv.ThreeView -> com.aoeng.degu.ui.cv.ThreeView:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.TwoView -> com.aoeng.degu.ui.cv.TwoView:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.cv.views.BidirSlidingView -> com.aoeng.degu.ui.cv.views.BidirSlidingView:
    int slideState -> a
    int screenWidth -> b
    int touchSlop -> c
    float xDown -> d
    float yDown -> e
    float xMove -> f
    float yMove -> g
    float xUp -> h
    boolean isLeftMenuVisible -> i
    boolean isRightMenuVisible -> j
    boolean isSliding -> k
    android.view.View leftMenuLayout -> l
    android.view.View rightMenuLayout -> m
    android.view.View contentLayout -> n
    android.view.View mBindView -> o
    android.view.ViewGroup$MarginLayoutParams leftMenuLayoutParams -> p
    android.view.ViewGroup$MarginLayoutParams rightMenuLayoutParams -> q
    android.widget.RelativeLayout$LayoutParams contentLayoutParams -> r
    android.view.VelocityTracker mVelocityTracker -> s
    void setScrollEvent(android.view.View) -> setScrollEvent
    void scrollToLeftMenu() -> a
    void scrollToRightMenu() -> b
    void scrollToContentFromLeftMenu() -> c
    void scrollToContentFromRightMenu() -> d
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void checkSlideState(int,int) -> a
    void checkLeftMenuBorder() -> e
    void checkRightMenuBorder() -> f
    boolean shouldScrollToLeftMenu() -> g
    boolean shouldScrollToRightMenu() -> h
    boolean shouldScrollToContentFromLeftMenu() -> i
    boolean shouldScrollToContentFromRightMenu() -> j
    void createVelocityTracker(android.view.MotionEvent) -> a
    int getScrollVelocity() -> getScrollVelocity
    void recycleVelocityTracker() -> k
    void unFocusBindView() -> l
    void sleep(long) -> a
    android.widget.RelativeLayout$LayoutParams access$0(com.aoeng.degu.ui.cv.views.BidirSlidingView) -> a
    android.view.ViewGroup$MarginLayoutParams access$1(com.aoeng.degu.ui.cv.views.BidirSlidingView) -> b
    void access$2(com.aoeng.degu.ui.cv.views.BidirSlidingView,long) -> a
    void access$3(com.aoeng.degu.ui.cv.views.BidirSlidingView,boolean) -> a
    void access$4(com.aoeng.degu.ui.cv.views.BidirSlidingView,boolean) -> b
    android.view.View access$5(com.aoeng.degu.ui.cv.views.BidirSlidingView) -> c
    void access$6(com.aoeng.degu.ui.cv.views.BidirSlidingView) -> d
    android.view.ViewGroup$MarginLayoutParams access$7(com.aoeng.degu.ui.cv.views.BidirSlidingView) -> e
    void access$8(com.aoeng.degu.ui.cv.views.BidirSlidingView,boolean) -> c
com.aoeng.degu.ui.cv.views.BidirSlidingView$LeftMenuScrollTask -> com.aoeng.degu.ui.cv.views.a:
    com.aoeng.degu.ui.cv.views.BidirSlidingView this$0 -> a
    java.lang.Integer doInBackground(java.lang.Integer[]) -> a
    void onProgressUpdate(java.lang.Integer[]) -> b
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.aoeng.degu.ui.cv.views.BidirSlidingView$RightMenuScrollTask -> com.aoeng.degu.ui.cv.views.b:
    com.aoeng.degu.ui.cv.views.BidirSlidingView this$0 -> a
    java.lang.Integer doInBackground(java.lang.Integer[]) -> a
    void onProgressUpdate(java.lang.Integer[]) -> b
    void onPostExecute(java.lang.Integer) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView -> com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView:
    int page -> a
    int columnWidth -> b
    int firstColumnHeight -> c
    int secondColumnHeight -> d
    int thirdColumnHeight -> e
    boolean loadOnce -> f
    com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader imageLoader -> g
    android.widget.LinearLayout firstColumn -> h
    android.widget.LinearLayout secondColumn -> i
    android.widget.LinearLayout thirdColumn -> j
    java.util.Set taskCollection -> k
    android.view.View scrollLayout -> l
    int scrollViewHeight -> m
    int lastScrollY -> n
    java.util.List imageViewList -> o
    android.os.Handler handler -> p
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void loadMoreImages() -> a
    void checkVisibility() -> b
    boolean hasSDCard() -> h
    int access$0() -> c
    int access$1() -> d
    android.view.View access$2() -> e
    java.util.Set access$3() -> f
    void access$4(int) -> a
    android.os.Handler access$5() -> g
    com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader access$6(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> a
    int access$7(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> b
    java.util.List access$8(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> c
    int access$9(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> d
    int access$10(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> e
    int access$11(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> f
    void access$12(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView,int) -> a
    android.widget.LinearLayout access$13(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> g
    void access$14(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView,int) -> b
    android.widget.LinearLayout access$15(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> h
    void access$16(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView,int) -> c
    android.widget.LinearLayout access$17(com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView) -> i
com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView$1 -> com.aoeng.degu.ui.cv.views.c:
    void handleMessage(android.os.Message) -> handleMessage
com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView$LoadImageTask -> com.aoeng.degu.ui.cv.views.d:
    java.lang.String mImageUrl -> b
    android.widget.ImageView mImageView -> c
    com.aoeng.degu.ui.cv.views.PhotoWaterFallScrollView this$0 -> a
    android.graphics.Bitmap doInBackground(java.lang.String[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    android.graphics.Bitmap loadImage(java.lang.String) -> a
    void addImage(android.graphics.Bitmap,int,int) -> a
    android.widget.LinearLayout findColumnToAdd(android.widget.ImageView,int) -> a
    void downloadImage(java.lang.String) -> b
    java.lang.String getImagePath(java.lang.String) -> c
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.ui.imgs.CircleImgUI -> com.aoeng.degu.ui.imgs.CircleImgUI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.imgs.CircleImgUI$MainFragment -> com.aoeng.degu.ui.imgs.a:
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> onCreateView
com.aoeng.degu.ui.imgs.CustomShapeImgUI -> com.aoeng.degu.ui.imgs.CustomShapeImgUI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.imgs.CustomShapeImgUI$SvgImagesAdapter -> com.aoeng.degu.ui.imgs.b:
    java.util.List mSvgRawResourceIds -> b
    android.content.Context mContext -> c
    com.aoeng.degu.ui.imgs.CustomShapeImgUI this$0 -> a
    int getCount() -> getCount
    java.lang.Integer getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.aoeng.degu.ui.imgs.ImageViewsUI -> com.aoeng.degu.ui.imgs.ImageViewsUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.jni.JNIHomeUI -> com.aoeng.degu.ui.jni.JNIHomeUI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.logins.LoginQQSplashUI -> com.aoeng.degu.ui.logins.LoginQQSplashUI:
    void onCreate(android.os.Bundle) -> onCreate
    void startMainActivity() -> a
com.aoeng.degu.ui.logins.LoginQQSplashUI$1 -> com.aoeng.degu.ui.logins.a:
    com.aoeng.degu.ui.logins.LoginQQSplashUI this$0 -> a
    void run() -> run
com.aoeng.degu.ui.logins.LoginQQUI -> com.aoeng.degu.ui.logins.LoginQQUI:
    android.widget.Button login_Button -> a
    android.view.View moreHideBottomView -> b
    android.view.View input2 -> c
    android.widget.ImageView more_imageView -> d
    boolean mShowBottom -> e
    android.content.Intent intent -> f
    android.app.Dialog mDialog -> g
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> a
    void showBottom(boolean) -> a
    void onClick(android.view.View) -> onClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
com.aoeng.degu.ui.logins.LoginUIs -> com.aoeng.degu.ui.logins.LoginUIs:
    void onCreate(android.os.Bundle) -> onCreate
    void setViewEvent() -> a
    void initView() -> b
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.logins.MainQQActivity -> com.aoeng.degu.ui.logins.MainQQActivity:
    android.support.v4.view.ViewPager viewPager -> a
    android.widget.ImageView imageView -> b
    android.widget.TextView textView1 -> c
    android.widget.TextView textView2 -> d
    android.widget.TextView textView3 -> e
    android.widget.TextView textView4 -> f
    android.view.View view1 -> g
    android.view.View view2 -> h
    android.view.View view3 -> i
    android.view.View view4 -> j
    java.util.List views -> k
    int offSet -> l
    int currIndex -> m
    int bmpW -> n
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> a
    void initListener() -> b
    int access$0(com.aoeng.degu.ui.logins.MainQQActivity) -> a
    int access$1(com.aoeng.degu.ui.logins.MainQQActivity) -> b
    int access$2(com.aoeng.degu.ui.logins.MainQQActivity) -> c
    void access$3(com.aoeng.degu.ui.logins.MainQQActivity,int) -> a
    android.widget.ImageView access$4(com.aoeng.degu.ui.logins.MainQQActivity) -> d
    android.widget.TextView access$5(com.aoeng.degu.ui.logins.MainQQActivity) -> e
    android.widget.TextView access$6(com.aoeng.degu.ui.logins.MainQQActivity) -> f
    android.widget.TextView access$7(com.aoeng.degu.ui.logins.MainQQActivity) -> g
    android.widget.TextView access$8(com.aoeng.degu.ui.logins.MainQQActivity) -> h
    android.support.v4.view.ViewPager access$9(com.aoeng.degu.ui.logins.MainQQActivity) -> i
com.aoeng.degu.ui.logins.MainQQActivity$MyOnClickListener -> com.aoeng.degu.ui.logins.b:
    int index -> b
    com.aoeng.degu.ui.logins.MainQQActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.logins.MainQQActivity$MyOnPageChangeListener -> com.aoeng.degu.ui.logins.c:
    int one -> a
    com.aoeng.degu.ui.logins.MainQQActivity this$0 -> b
    void onPageScrollStateChanged(int) -> b
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
com.aoeng.degu.ui.logins.MainQQActivity$MyPagerAdapter -> com.aoeng.degu.ui.logins.d:
    java.util.List mListViews -> b
    com.aoeng.degu.ui.logins.MainQQActivity this$0 -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    int getCount() -> a
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
com.aoeng.degu.ui.lvs.ExpandLvUI -> com.aoeng.degu.ui.lvs.ExpandLvUI:
    com.aoeng.degu.views.PinnedHeaderExpandableListView expandableListView -> a
    com.aoeng.degu.views.StickyLayout stickyLayout -> b
    java.util.ArrayList groupList -> c
    java.util.ArrayList childList -> d
    com.aoeng.degu.ui.lvs.ExpandLvUI$MyexpandableListAdapter adapter -> e
    android.view.ViewGroup mHeaderView -> f
    void onCreate(android.os.Bundle) -> onCreate
    void initData() -> a
    boolean onGroupClick(android.widget.ExpandableListView,android.view.View,int,long) -> onGroupClick
    boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long) -> onChildClick
    android.view.View getPinnedHeader() -> b
    void updatePinnedHeader(int) -> a
    boolean giveUpTouchEvent(android.view.MotionEvent) -> a
    java.util.ArrayList access$0(com.aoeng.degu.ui.lvs.ExpandLvUI) -> a
    java.util.ArrayList access$1(com.aoeng.degu.ui.lvs.ExpandLvUI) -> b
com.aoeng.degu.ui.lvs.ExpandLvUI$ChildHolder -> com.aoeng.degu.ui.lvs.a:
    android.widget.TextView textName -> a
    android.widget.TextView textAge -> b
    android.widget.TextView textAddress -> c
    android.widget.ImageView imageView -> d
    com.aoeng.degu.ui.lvs.ExpandLvUI this$0 -> e
com.aoeng.degu.ui.lvs.ExpandLvUI$GroupHolder -> com.aoeng.degu.ui.lvs.b:
    android.widget.TextView textView -> a
    android.widget.ImageView imageView -> b
    com.aoeng.degu.ui.lvs.ExpandLvUI this$0 -> c
com.aoeng.degu.ui.lvs.ExpandLvUI$MyexpandableListAdapter -> com.aoeng.degu.ui.lvs.c:
    android.content.Context context -> b
    android.view.LayoutInflater inflater -> c
    com.aoeng.degu.ui.lvs.ExpandLvUI this$0 -> a
    int getGroupCount() -> getGroupCount
    int getChildrenCount(int) -> getChildrenCount
    java.lang.Object getGroup(int) -> getGroup
    java.lang.Object getChild(int,int) -> getChild
    long getGroupId(int) -> getGroupId
    long getChildId(int,int) -> getChildId
    boolean hasStableIds() -> hasStableIds
    android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup) -> getGroupView
    android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup) -> getChildView
    boolean isChildSelectable(int,int) -> isChildSelectable
    com.aoeng.degu.ui.lvs.ExpandLvUI access$0(com.aoeng.degu.ui.lvs.ExpandLvUI$MyexpandableListAdapter) -> a
com.aoeng.degu.ui.lvs.ExpandLvUI$MyexpandableListAdapter$1 -> com.aoeng.degu.ui.lvs.d:
    com.aoeng.degu.ui.lvs.ExpandLvUI$MyexpandableListAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.lvs.ListViewsUI -> com.aoeng.degu.ui.lvs.ListViewsUI:
    void onCreate(android.os.Bundle) -> onCreate
    void initViews() -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.lvs.MovingDelItemLvUI -> com.aoeng.degu.ui.lvs.MovingDelItemLvUI:
    com.aoeng.degu.views.ListViewCompat mListView -> a
    java.util.List mMessageItems -> b
    com.aoeng.degu.ui.lvs.MovingDelItemLvUI$SlideAdapter adapter -> c
    com.aoeng.degu.views.SlideView mLastSlideViewWithStatusOn -> d
    void onCreate(android.os.Bundle) -> onCreate
    void initView() -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onSlide(android.view.View,int) -> a
    void onClick(android.view.View) -> onClick
    java.util.List access$0(com.aoeng.degu.ui.lvs.MovingDelItemLvUI) -> a
    com.aoeng.degu.ui.lvs.MovingDelItemLvUI$SlideAdapter access$1(com.aoeng.degu.ui.lvs.MovingDelItemLvUI) -> b
com.aoeng.degu.ui.lvs.MovingDelItemLvUI$MessageItem -> com.aoeng.degu.ui.lvs.e:
    int iconRes -> a
    java.lang.String title -> b
    java.lang.String msg -> c
    java.lang.String time -> d
    com.aoeng.degu.views.SlideView slideView -> e
    com.aoeng.degu.ui.lvs.MovingDelItemLvUI this$0 -> f
com.aoeng.degu.ui.lvs.MovingDelItemLvUI$SlideAdapter -> com.aoeng.degu.ui.lvs.f:
    android.view.LayoutInflater mInflater -> b
    com.aoeng.degu.ui.lvs.MovingDelItemLvUI this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.aoeng.degu.ui.lvs.MovingDelItemLvUI access$0(com.aoeng.degu.ui.lvs.MovingDelItemLvUI$SlideAdapter) -> a
com.aoeng.degu.ui.lvs.MovingDelItemLvUI$SlideAdapter$1 -> com.aoeng.degu.ui.lvs.g:
    com.aoeng.degu.ui.lvs.MovingDelItemLvUI$SlideAdapter this$1 -> a
    int val$position -> b
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.lvs.MovingDelItemLvUI$ViewHolder -> com.aoeng.degu.ui.lvs.h:
    android.widget.ImageView icon -> a
    android.widget.TextView title -> b
    android.widget.TextView msg -> c
    android.widget.TextView time -> d
    android.view.ViewGroup deleteHolder -> e
com.aoeng.degu.ui.lvs.NLPullRefreshView -> com.aoeng.degu.ui.lvs.NLPullRefreshView:
    java.text.SimpleDateFormat dateFormat -> a
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status status -> b
    android.widget.Scroller scroller -> c
    android.view.View refreshView -> d
    android.widget.ImageView refreshIndicatorView -> e
    int refreshTargetTop -> f
    android.widget.ProgressBar bar -> g
    android.widget.TextView downTextView -> h
    android.widget.TextView timeTextView -> i
    com.aoeng.degu.ui.lvs.NLPullRefreshView$RefreshListener refreshListener -> j
    java.lang.String downCanRefreshText -> k
    java.lang.String releaseCanRefreshText -> l
    java.lang.String refreshTime -> m
    int lastY -> n
    android.content.Context mContext -> o
    void init() -> b
    void setRefreshText(java.lang.String) -> setRefreshText
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void fling() -> c
    void returnInitState() -> d
    void refresh() -> e
    void computeScroll() -> computeScroll
    void doMovement(int) -> a
    void setRefreshTime(java.lang.String) -> setRefreshTime
    void setRefreshListener(com.aoeng.degu.ui.lvs.NLPullRefreshView$RefreshListener) -> setRefreshListener
    void refreshTimeBySystem() -> f
    void finishRefresh() -> a
    boolean canScroll() -> g
    int getPixelByDip(android.content.Context,int) -> a
com.aoeng.degu.ui.lvs.NLPullRefreshView$RefreshListener -> com.aoeng.degu.ui.lvs.i:
    void onRefresh(com.aoeng.degu.ui.lvs.NLPullRefreshView) -> a
com.aoeng.degu.ui.lvs.NLPullRefreshView$Status -> com.aoeng.degu.ui.lvs.j:
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status NORMAL -> a
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status DRAGGING -> b
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status REFRESHING -> c
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status[] ENUM$VALUES -> d
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status[] values() -> values
    com.aoeng.degu.ui.lvs.NLPullRefreshView$Status valueOf(java.lang.String) -> valueOf
com.aoeng.degu.ui.lvs.NormalListViewUI -> com.aoeng.degu.ui.lvs.NormalListViewUI:
com.aoeng.degu.ui.lvs.PagesListViewUI -> com.aoeng.degu.ui.lvs.PagesListViewUI:
    java.lang.String TAG -> a
    com.aoeng.degu.adapter.ListViewAdapter adapter -> b
    android.widget.ListView listView -> c
    int lastItem -> d
    android.widget.LinearLayout loadingLayout -> e
    android.widget.LinearLayout$LayoutParams mLayoutParams -> f
    android.widget.LinearLayout$LayoutParams ffLayoutParams -> g
    android.widget.ProgressBar progressBar -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void log(java.lang.String) -> a
    void toast(java.lang.String) -> b
com.aoeng.degu.ui.lvs.PullToRefreshListView -> com.aoeng.degu.ui.lvs.PullToRefreshListView:
    com.aoeng.degu.ui.lvs.PullToRefreshListView$OnRefreshListener mOnRefreshListener -> a
    android.widget.AbsListView$OnScrollListener mOnScrollListener -> b
    android.view.LayoutInflater mInflater -> c
    android.widget.RelativeLayout mRefreshHeaderView -> d
    android.widget.TextView mRefreshViewText -> e
    android.widget.ImageView mRefreshViewImage -> f
    android.widget.ProgressBar mRefreshViewProgress -> g
    android.widget.TextView mRefreshViewLastUpdated -> h
    android.widget.RelativeLayout mLoadMoreFooterView -> i
    android.widget.TextView mLoadMoreText -> j
    android.widget.ProgressBar mLoadMoreProgress -> k
    int mCurrentScrollState -> l
    int mRefreshState -> m
    int mLoadState -> n
    android.view.animation.RotateAnimation mFlipAnimation -> o
    android.view.animation.RotateAnimation mReverseFlipAnimation -> p
    int mRefreshViewHeight -> q
    int mRefreshOriginalTopPadding -> r
    int mLastMotionY -> s
    void init(android.content.Context) -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void setOnRefreshListener(com.aoeng.degu.ui.lvs.PullToRefreshListView$OnRefreshListener) -> setOnRefreshListener
    void setLastUpdated(java.lang.CharSequence) -> setLastUpdated
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void applyHeaderPadding(android.view.MotionEvent) -> a
    void resetHeaderPadding() -> g
    void resetHeader() -> h
    void resetFooter() -> i
    void measureView(android.view.View) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void prepareForRefresh() -> a
    void prepareForLoadMore() -> b
    void onRefresh() -> c
    void OnLoadMore() -> d
    void onRefreshComplete(java.lang.CharSequence) -> a
    void onRefreshComplete() -> e
    void onLoadMoreComplete() -> f
    int access$0(com.aoeng.degu.ui.lvs.PullToRefreshListView) -> a
    int access$1(com.aoeng.degu.ui.lvs.PullToRefreshListView) -> b
com.aoeng.degu.ui.lvs.PullToRefreshListView$OnClickLoadMoreListener -> com.aoeng.degu.ui.lvs.k:
    com.aoeng.degu.ui.lvs.PullToRefreshListView this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.lvs.PullToRefreshListView$OnClickRefreshListener -> com.aoeng.degu.ui.lvs.l:
    com.aoeng.degu.ui.lvs.PullToRefreshListView this$0 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.lvs.PullToRefreshListView$OnRefreshListener -> com.aoeng.degu.ui.lvs.m:
    void onRefresh() -> a
    void onLoadMore() -> b
com.aoeng.degu.ui.lvs.PullToRefreshUI -> com.aoeng.degu.ui.lvs.PullToRefreshUI:
    java.util.LinkedList mListItems -> c
    com.aoeng.degu.ui.lvs.PullToRefreshListView weiboListView -> a
    java.lang.String[] mStrings -> b
    void onCreate(android.os.Bundle) -> onCreate
    java.util.LinkedList access$0(com.aoeng.degu.ui.lvs.PullToRefreshUI) -> a
com.aoeng.degu.ui.lvs.PullToRefreshUI$1 -> com.aoeng.degu.ui.lvs.n:
    com.aoeng.degu.ui.lvs.PullToRefreshUI this$0 -> a
    void onRefresh() -> a
    void onLoadMore() -> b
com.aoeng.degu.ui.lvs.PullToRefreshUI$GetDataTask -> com.aoeng.degu.ui.lvs.o:
    android.content.Context context -> b
    int index -> c
    com.aoeng.degu.ui.lvs.PullToRefreshUI this$0 -> a
    java.lang.String[] doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.String[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.ui.lvs.ReflashListUI -> com.aoeng.degu.ui.lvs.ReflashListUI:
    android.content.Context mContext -> d
    com.aoeng.degu.ui.lvs.NLPullRefreshView mPullRefreshView -> e
    android.widget.ListView mListView -> f
    android.os.Handler handler -> a
    int refreshCount -> b
    int count -> c
    void onCreate(android.os.Bundle) -> onCreate
    void init() -> a
    void onRefresh(com.aoeng.degu.ui.lvs.NLPullRefreshView) -> a
    com.aoeng.degu.ui.lvs.NLPullRefreshView access$0(com.aoeng.degu.ui.lvs.ReflashListUI) -> a
    android.widget.ListView access$1(com.aoeng.degu.ui.lvs.ReflashListUI) -> b
    android.content.Context access$2(com.aoeng.degu.ui.lvs.ReflashListUI) -> c
com.aoeng.degu.ui.lvs.ReflashListUI$1 -> com.aoeng.degu.ui.lvs.p:
    com.aoeng.degu.ui.lvs.ReflashListUI this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aoeng.degu.ui.lvs.ReflashListUI$MyAdapter -> com.aoeng.degu.ui.lvs.q:
    int size -> a
    com.aoeng.degu.ui.lvs.ReflashListUI this$0 -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    com.aoeng.degu.ui.lvs.ReflashListUI access$0(com.aoeng.degu.ui.lvs.ReflashListUI$MyAdapter) -> a
com.aoeng.degu.ui.lvs.ReflashListUI$MyAdapter$1 -> com.aoeng.degu.ui.lvs.r:
    com.aoeng.degu.ui.lvs.ReflashListUI$MyAdapter this$1 -> a
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.lvs.RefreshScrollUI -> com.aoeng.degu.ui.lvs.RefreshScrollUI:
    com.aoeng.degu.ui.lvs.NLPullRefreshView mRefreshableView -> b
    android.content.Context mContext -> c
    android.os.Handler handler -> a
    void onCreate(android.os.Bundle) -> onCreate
    void init() -> a
    void initView() -> b
    void initData() -> c
    void onRefresh(com.aoeng.degu.ui.lvs.NLPullRefreshView) -> a
    com.aoeng.degu.ui.lvs.NLPullRefreshView access$0(com.aoeng.degu.ui.lvs.RefreshScrollUI) -> a
    android.content.Context access$1(com.aoeng.degu.ui.lvs.RefreshScrollUI) -> b
com.aoeng.degu.ui.lvs.RefreshScrollUI$1 -> com.aoeng.degu.ui.lvs.s:
    com.aoeng.degu.ui.lvs.RefreshScrollUI this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aoeng.degu.ui.lvs.UpDownLvUI -> com.aoeng.degu.ui.lvs.UpDownLvUI:
    java.util.List listViewData -> a
    void onCreate(android.os.Bundle) -> onCreate
    java.util.List access$0(com.aoeng.degu.ui.lvs.UpDownLvUI) -> a
com.aoeng.degu.ui.lvs.UpDownLvUI$1 -> com.aoeng.degu.ui.lvs.t:
    com.aoeng.degu.ui.lvs.UpDownLvUI this$0 -> a
    com.aoeng.degu.ui.lvs.UpDownLvUI$MyAdapter val$mAdapter -> b
    com.aoeng.degu.views.RefreshLV val$mRefreshListView -> c
    void onRefresh() -> a
    void onLoadMoring() -> b
    com.aoeng.degu.ui.lvs.UpDownLvUI access$0(com.aoeng.degu.ui.lvs.UpDownLvUI$1) -> a
com.aoeng.degu.ui.lvs.UpDownLvUI$1$1 -> com.aoeng.degu.ui.lvs.u:
    com.aoeng.degu.ui.lvs.UpDownLvUI$1 this$1 -> a
    com.aoeng.degu.ui.lvs.UpDownLvUI$MyAdapter val$mAdapter -> b
    com.aoeng.degu.views.RefreshLV val$mRefreshListView -> c
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.ui.lvs.UpDownLvUI$1$2 -> com.aoeng.degu.ui.lvs.v:
    com.aoeng.degu.ui.lvs.UpDownLvUI$1 this$1 -> a
    com.aoeng.degu.ui.lvs.UpDownLvUI$MyAdapter val$mAdapter -> b
    com.aoeng.degu.views.RefreshLV val$mRefreshListView -> c
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.ui.lvs.UpDownLvUI$MyAdapter -> com.aoeng.degu.ui.lvs.w:
    com.aoeng.degu.ui.lvs.UpDownLvUI this$0 -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.aoeng.degu.ui.lvs.UpDownLvUI$OnRefreshListener -> com.aoeng.degu.ui.lvs.x:
    void onRefresh() -> a
    void onLoadMoring() -> b
com.aoeng.degu.ui.nt.NetWorkUI -> com.aoeng.degu.ui.nt.NetWorkUI:
    java.lang.String TAG -> b
    android.bluetooth.BluetoothAdapter bluetoothAdapter -> c
    android.os.Handler handler -> d
    android.widget.Button btnScanServerPort -> e
    android.widget.EditText etClientInfo -> f
    android.widget.EditText etPhoneIP -> g
    android.widget.EditText etPhonePort -> h
    android.widget.Button btnStartPhoneShare -> i
    android.widget.Button btnStopPhoneShare -> j
    java.net.ServerSocket serverSocket -> a
    android.widget.EditText etPhone -> k
    android.widget.TextView tvPhoneInfo -> l
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void toast(java.lang.String) -> a
    android.os.Handler access$0(com.aoeng.degu.ui.nt.NetWorkUI) -> a
    android.widget.Button access$1(com.aoeng.degu.ui.nt.NetWorkUI) -> b
com.aoeng.degu.ui.nt.NetWorkUI$1 -> com.aoeng.degu.ui.nt.a:
    com.aoeng.degu.ui.nt.NetWorkUI this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.aoeng.degu.ui.nt.NetWorkUI$2 -> com.aoeng.degu.ui.nt.b:
    com.aoeng.degu.ui.nt.NetWorkUI this$0 -> a
    java.lang.String val$addressIP -> b
    java.lang.String val$port -> c
    void run() -> run
com.aoeng.degu.ui.nt.NetWorkUI$ScanPorts -> com.aoeng.degu.ui.nt.c:
    int minPort -> b
    int maxPort -> c
    java.lang.String str -> d
    com.aoeng.degu.ui.nt.NetWorkUI this$0 -> a
    void run() -> run
    java.lang.String access$0(com.aoeng.degu.ui.nt.NetWorkUI$ScanPorts) -> a
    com.aoeng.degu.ui.nt.NetWorkUI access$1(com.aoeng.degu.ui.nt.NetWorkUI$ScanPorts) -> b
com.aoeng.degu.ui.nt.NetWorkUI$ScanPorts$1 -> com.aoeng.degu.ui.nt.d:
    com.aoeng.degu.ui.nt.NetWorkUI$ScanPorts this$1 -> a
    void run() -> run
com.aoeng.degu.ui.nt.VolleyUI -> com.aoeng.degu.ui.nt.VolleyUI:
    com.android.volley.RequestQueue requestQueue -> a
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.nt.VolleyUI$1 -> com.aoeng.degu.ui.nt.e:
    com.aoeng.degu.ui.nt.VolleyUI this$0 -> a
    void onResponse(org.json.JSONObject) -> a
    void onResponse(java.lang.Object) -> a
com.aoeng.degu.ui.security.Antidex2JarUI -> com.aoeng.degu.ui.security.Antidex2JarUI:
    android.widget.TextView tvAntidex2Jareg -> d
    void onClick(android.view.View) -> onClick
    void loadViewLayout() -> a
    void findViewById() -> b
    void setListener() -> c
    void processLogic() -> d
    int position(int) -> b
com.aoeng.degu.ui.security.ProguardUI -> com.aoeng.degu.ui.security.ProguardUI:
    void onClick(android.view.View) -> onClick
    void loadViewLayout() -> a
    void findViewById() -> b
    void setListener() -> c
    void processLogic() -> d
com.aoeng.degu.ui.security.SecurityUI -> com.aoeng.degu.ui.security.SecurityUI:
    android.widget.Button btnAntidex2Jar -> d
    android.widget.Button btnProguard -> e
    void loadViewLayout() -> a
    void findViewById() -> b
    void setListener() -> c
    void processLogic() -> d
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.services.ServiceUI -> com.aoeng.degu.ui.services.ServiceUI:
    android.content.Intent intent -> a
    com.aoeng.degu.services.BindServices bindServices -> b
    android.content.ServiceConnection serviceConnection -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
    void access$0(com.aoeng.degu.ui.services.ServiceUI,com.aoeng.degu.services.BindServices) -> a
com.aoeng.degu.ui.services.ServiceUI$1 -> com.aoeng.degu.ui.services.a:
    com.aoeng.degu.ui.services.ServiceUI this$0 -> a
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
com.aoeng.degu.ui.uis.Action2UI -> com.aoeng.degu.ui.uis.Action2UI:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.uis.ActionUI -> com.aoeng.degu.ui.uis.ActionUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.uis.Group1UI -> com.aoeng.degu.ui.uis.Group1UI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClickGU1(android.view.View) -> onClickGU1
com.aoeng.degu.ui.uis.Group2UI -> com.aoeng.degu.ui.uis.Group2UI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClickGU2(android.view.View) -> onClickGU2
com.aoeng.degu.ui.uis.Group3UI -> com.aoeng.degu.ui.uis.Group3UI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClickGU3(android.view.View) -> onClickGU3
com.aoeng.degu.ui.uis.GroupMainUI -> com.aoeng.degu.ui.uis.GroupMainUI:
    android.widget.LinearLayout lyHeader -> a
    android.widget.LinearLayout lyBody -> b
    android.widget.LinearLayout lyBottom -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onClickBottom(android.view.View) -> onClickBottom
com.aoeng.degu.ui.uis.UIsUI -> com.aoeng.degu.ui.uis.UIsUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.ui.wv.SimpleWebViewUI -> com.aoeng.degu.ui.wv.SimpleWebViewUI:
    android.webkit.WebView wvSimple -> a
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.ui.wv.SimpleWebViewUI$1 -> com.aoeng.degu.ui.wv.a:
    com.aoeng.degu.ui.wv.SimpleWebViewUI this$0 -> a
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
com.aoeng.degu.ui.wv.WebViewUI -> com.aoeng.degu.ui.wv.WebViewUI:
    void onCreate(android.os.Bundle) -> onCreate
    void onClick(android.view.View) -> onClick
com.aoeng.degu.utils.ImagesURL -> com.aoeng.degu.d.a:
    java.lang.String[] imageThumbUrls -> a
com.aoeng.degu.utils.Logger -> com.aoeng.degu.d.b:
    void d(java.lang.String,java.lang.String) -> a
    void i(java.lang.String,java.lang.String) -> b
    void e(java.lang.String,java.lang.String) -> c
com.aoeng.degu.utils.ThreadPoolManager -> com.aoeng.degu.d.c:
    java.util.concurrent.ExecutorService service -> a
    com.aoeng.degu.utils.ThreadPoolManager manager -> b
    com.aoeng.degu.utils.ThreadPoolManager getInstance() -> a
    void addTask(java.lang.Runnable) -> a
com.aoeng.degu.utils.ViewUtils -> com.aoeng.degu.d.d:
    void toast(android.content.Context,java.lang.String,boolean) -> a
    void toastCenter(android.content.Context,java.lang.String,boolean) -> b
    void log(java.lang.String,java.lang.String) -> a
com.aoeng.degu.utils.cv.BigImageLoadingDialog -> com.aoeng.degu.d.a.a:
    void onCreate(android.os.Bundle) -> onCreate
com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader -> com.aoeng.degu.d.a.b:
    int lruMaxMemory -> a
    com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader imageLoader -> b
    android.support.v4.util.LruCache lruCache -> c
    com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader instancePhotoWaterFallImageLoader() -> a
    void addBitmap2MemoryCache(java.lang.String,android.graphics.Bitmap) -> a
    android.graphics.Bitmap getBitmapFromCache(java.lang.String) -> a
    int calculateInSampleSize(android.graphics.BitmapFactory$Options,int) -> a
    android.graphics.Bitmap decodeSampleBitmapFromResource(java.lang.String,int) -> a
com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader$1 -> com.aoeng.degu.d.a.c:
    com.aoeng.degu.utils.cv.PhotoWaterFallImageLoader this$0 -> a
    int sizeOf(java.lang.String,android.graphics.Bitmap) -> a
    int sizeOf(java.lang.Object,java.lang.Object) -> b
com.aoeng.degu.utils.cv.TwoCacheImageLoader -> com.aoeng.degu.d.a.d:
    java.util.HashMap mFirstLevelCache -> a
    java.util.HashMap mSecondLevelCache -> b
    android.os.Handler mPurgeHandler -> c
    java.lang.Runnable mClearCache -> d
    void resetTimer() -> a
    void clear() -> b
    android.graphics.Bitmap getBitmapFromCache(java.lang.String) -> a
    android.graphics.Bitmap getBitmapFromSecondLevelCache(java.lang.String) -> b
    android.graphics.Bitmap getFromFirstLevelCache(java.lang.String) -> c
    android.graphics.Bitmap downloadImageFromInternet(java.lang.String) -> d
    void loadImage(java.lang.String,android.widget.BaseAdapter,android.widget.ImageView) -> a
    void addImage2Cache(java.lang.String,android.graphics.Bitmap) -> a
    java.util.HashMap access$0(com.aoeng.degu.utils.cv.TwoCacheImageLoader) -> a
    void access$1(com.aoeng.degu.utils.cv.TwoCacheImageLoader) -> b
    android.graphics.Bitmap access$2(com.aoeng.degu.utils.cv.TwoCacheImageLoader,java.lang.String) -> a
    void access$3(com.aoeng.degu.utils.cv.TwoCacheImageLoader,java.lang.String,android.graphics.Bitmap) -> a
com.aoeng.degu.utils.cv.TwoCacheImageLoader$1 -> com.aoeng.degu.d.a.e:
    com.aoeng.degu.utils.cv.TwoCacheImageLoader this$0 -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.aoeng.degu.utils.cv.TwoCacheImageLoader$2 -> com.aoeng.degu.d.a.f:
    com.aoeng.degu.utils.cv.TwoCacheImageLoader this$0 -> a
com.aoeng.degu.utils.cv.TwoCacheImageLoader$3 -> com.aoeng.degu.d.a.g:
    com.aoeng.degu.utils.cv.TwoCacheImageLoader this$0 -> a
    void run() -> run
com.aoeng.degu.utils.cv.TwoCacheImageLoader$ImageLoadTask -> com.aoeng.degu.d.a.h:
    java.lang.String url -> b
    android.widget.BaseAdapter adapter -> c
    com.aoeng.degu.utils.cv.TwoCacheImageLoader this$0 -> a
    android.graphics.Bitmap doInBackground(java.lang.Object[]) -> a
    void onPostExecute(android.graphics.Bitmap) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.aoeng.degu.utils.svgandroid.ParserHelper -> com.aoeng.degu.d.b.a:
    char current -> b
    java.lang.CharSequence s -> c
    int pos -> a
    int n -> d
    double[] pow10 -> e
    char read() -> f
    void skipWhitespace() -> a
    void skipNumberSeparator() -> b
    void advance() -> c
    float parseFloat() -> d
    void reportUnexpectedCharacterError(char) -> a
    float buildFloat(int,int) -> a
    float nextFloat() -> e
com.aoeng.degu.utils.svgandroid.SVG -> com.aoeng.degu.d.b.b:
    android.graphics.Picture picture -> a
    android.graphics.RectF bounds -> b
    android.graphics.RectF limits -> c
    void setLimits(android.graphics.RectF) -> a
    android.graphics.Picture getPicture() -> a
com.aoeng.degu.utils.svgandroid.SVGParseException -> com.aoeng.degu.d.b.c:
com.aoeng.degu.utils.svgandroid.SVGParser -> com.aoeng.degu.d.b.d:
    com.aoeng.degu.utils.svgandroid.SVG getSVGFromInputStream(java.io.InputStream,int,int) -> a
    com.aoeng.degu.utils.svgandroid.SVG parse(java.io.InputStream,java.lang.Integer,java.lang.Integer,boolean,int,int) -> a
    com.aoeng.degu.utils.svgandroid.SVGParser$NumberParse parseNumbers(java.lang.String) -> c
    android.graphics.Matrix parseTransform(java.lang.String) -> d
    android.graphics.Path doPath(java.lang.String) -> e
    void drawArc(android.graphics.Path,float,float,float,float,float,float,float,int,int) -> a
    com.aoeng.degu.utils.svgandroid.SVGParser$NumberParse getNumberParseAttr(java.lang.String,org.xml.sax.Attributes) -> d
    java.lang.String getStringAttr(java.lang.String,org.xml.sax.Attributes) -> e
    java.lang.Float getFloatAttr(java.lang.String,org.xml.sax.Attributes) -> f
    java.lang.Float getFloatAttr(java.lang.String,org.xml.sax.Attributes,java.lang.Float) -> b
    java.lang.String access$0(java.lang.String,org.xml.sax.Attributes) -> a
    java.lang.Float access$1(java.lang.String,org.xml.sax.Attributes,java.lang.Float) -> a
    android.graphics.Matrix access$2(java.lang.String) -> a
    java.lang.Float access$3(java.lang.String,org.xml.sax.Attributes) -> b
    com.aoeng.degu.utils.svgandroid.SVGParser$NumberParse access$4(java.lang.String,org.xml.sax.Attributes) -> c
    android.graphics.Path access$5(java.lang.String) -> b
com.aoeng.degu.utils.svgandroid.SVGParser$Gradient -> com.aoeng.degu.d.b.e:
    java.lang.String id -> a
    java.lang.String xlink -> b
    boolean isLinear -> c
    float x1 -> d
    float y1 -> e
    float x2 -> f
    float y2 -> g
    float x -> h
    float y -> i
    float radius -> j
    java.util.ArrayList positions -> k
    java.util.ArrayList colors -> l
    android.graphics.Matrix matrix -> m
    com.aoeng.degu.utils.svgandroid.SVGParser$Gradient createChild(com.aoeng.degu.utils.svgandroid.SVGParser$Gradient) -> a
com.aoeng.degu.utils.svgandroid.SVGParser$NumberParse -> com.aoeng.degu.d.b.f:
    java.util.ArrayList numbers -> a
    int nextCmd -> b
    java.util.ArrayList access$0(com.aoeng.degu.utils.svgandroid.SVGParser$NumberParse) -> a
com.aoeng.degu.utils.svgandroid.SVGParser$Properties -> com.aoeng.degu.d.b.g:
    com.aoeng.degu.utils.svgandroid.SVGParser$StyleSet styles -> a
    org.xml.sax.Attributes atts -> b
    java.lang.String getAttr(java.lang.String) -> a
    java.lang.String getString(java.lang.String) -> b
    java.lang.Integer getHex(java.lang.String) -> c
    java.lang.Float getFloat(java.lang.String) -> d
com.aoeng.degu.utils.svgandroid.SVGParser$SVGHandler -> com.aoeng.degu.d.b.h:
    android.graphics.Picture picture -> a
    android.graphics.Canvas canvas -> b
    android.graphics.Paint paint -> c
    android.graphics.RectF rect -> d
    android.graphics.RectF bounds -> e
    android.graphics.RectF limits -> f
    java.lang.Integer searchColor -> g
    java.lang.Integer replaceColor -> h
    int targetWidth -> i
    int targetHeight -> j
    boolean whiteMode -> k
    boolean pushed -> l
    java.util.HashMap gradientMap -> m
    java.util.HashMap gradientRefMap -> n
    com.aoeng.degu.utils.svgandroid.SVGParser$Gradient gradient -> o
    boolean hidden -> p
    int hiddenLevel -> q
    boolean boundsMode -> r
    void setColorSwap(java.lang.Integer,java.lang.Integer) -> a
    void setWhiteMode(boolean) -> a
    void startDocument() -> startDocument
    void endDocument() -> endDocument
    boolean doFill(com.aoeng.degu.utils.svgandroid.SVGParser$Properties,java.util.HashMap) -> a
    boolean doStroke(com.aoeng.degu.utils.svgandroid.SVGParser$Properties) -> a
    com.aoeng.degu.utils.svgandroid.SVGParser$Gradient doGradient(boolean,org.xml.sax.Attributes) -> a
    void doColor(com.aoeng.degu.utils.svgandroid.SVGParser$Properties,java.lang.Integer,boolean) -> a
    void doLimits(float,float) -> a
    void doLimits(float,float,float,float) -> a
    void doLimits(android.graphics.Path) -> a
    void pushTransform(org.xml.sax.Attributes) -> a
    void popTransform() -> a
    android.graphics.Canvas beginRecordingPicture(int,int) -> a
    void prepareScaledCanvas(android.graphics.Canvas,float,float) -> a
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void characters(char[],int,int) -> characters
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
com.aoeng.degu.utils.svgandroid.SVGParser$StyleSet -> com.aoeng.degu.d.b.i:
    java.util.HashMap styleMap -> a
    java.lang.String getStyle(java.lang.String) -> a
com.aoeng.degu.views.BaseImageView -> com.aoeng.degu.views.BaseImageView:
    java.lang.String TAG -> b
    android.content.Context mContext -> a
    android.graphics.Xfermode sXfermode -> c
    android.graphics.Bitmap mMaskBitmap -> d
    android.graphics.Paint mPaint -> e
    java.lang.ref.WeakReference mWeakBitmap -> f
    void sharedConstructor(android.content.Context) -> a
    void invalidate() -> invalidate
    void onDraw(android.graphics.Canvas) -> onDraw
    android.graphics.Bitmap getBitmap() -> getBitmap
com.aoeng.degu.views.CircleCanvasView -> com.aoeng.degu.views.a:
    java.util.List mCircleInfos -> a
    void onDraw(android.graphics.Canvas) -> onDraw
com.aoeng.degu.views.CircleCanvasView$CircleInfo -> com.aoeng.degu.views.b:
    float x -> a
    float y -> b
    float radius -> c
    int color -> d
    float getX() -> a
    float getY() -> b
    float getRadius() -> c
    int getColor() -> d
    void setX(float) -> a
    void setY(float) -> b
    void setRadius(float) -> c
    void setColor(int) -> a
com.aoeng.degu.views.CircleImageView -> com.aoeng.degu.views.CircleImageView:
    android.graphics.Bitmap getBitmap(int,int) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
com.aoeng.degu.views.CustomShapeImageView -> com.aoeng.degu.views.CustomShapeImageView:
    int mShape -> b
    int mSvgRawResourceId -> c
    void sharedConstructor(android.content.Context,android.util.AttributeSet) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
com.aoeng.degu.views.CustomShapeSquareImageView -> com.aoeng.degu.views.c:
    void onMeasure(int,int) -> onMeasure
com.aoeng.degu.views.ListViewCompat -> com.aoeng.degu.views.ListViewCompat:
    com.aoeng.degu.views.SlideView mFocusedItemView -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.aoeng.degu.views.PinnedHeaderExpandableListView -> com.aoeng.degu.views.PinnedHeaderExpandableListView:
    android.view.View mHeaderView -> a
    int mHeaderWidth -> b
    int mHeaderHeight -> c
    android.widget.AbsListView$OnScrollListener mScrollListener -> d
    com.aoeng.degu.views.PinnedHeaderExpandableListView$OnHeaderUpdateListener mHeaderUpdateListener -> e
    boolean mActionDownHappened -> f
    void initView() -> b
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void setOnHeaderUpdateListener(com.aoeng.degu.views.PinnedHeaderExpandableListView$OnHeaderUpdateListener) -> setOnHeaderUpdateListener
    void onMeasure(int,int) -> onMeasure
    void onLayout(boolean,int,int,int,int) -> onLayout
    void dispatchDraw(android.graphics.Canvas) -> dispatchDraw
    boolean dispatchTouchEvent(android.view.MotionEvent) -> dispatchTouchEvent
    void refreshHeader() -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
com.aoeng.degu.views.PinnedHeaderExpandableListView$OnHeaderUpdateListener -> com.aoeng.degu.views.d:
    android.view.View getPinnedHeader() -> b
    void updatePinnedHeader(int) -> a
com.aoeng.degu.views.RectangleImageView -> com.aoeng.degu.views.RectangleImageView:
    android.graphics.Bitmap getBitmap(int,int) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
com.aoeng.degu.views.RefreshLV -> com.aoeng.degu.views.RefreshLV:
    int downY -> a
    android.view.View headerView -> b
    int headerViewHeight -> c
    int firstVisibleItemPosition -> d
    com.aoeng.degu.views.RefreshLV$DisplayMode currentState -> e
    android.view.animation.Animation upAnim -> f
    android.view.animation.Animation downAnim -> g
    android.widget.ImageView ivArrow -> h
    android.widget.TextView tvState -> i
    android.widget.ProgressBar mProgressBar -> j
    android.widget.TextView tvLastUpdateTime -> k
    boolean isScroll2Bottom -> l
    android.view.View footerView -> m
    int footerViewHeight -> n
    boolean isLoadMoving -> o
    com.aoeng.degu.ui.lvs.UpDownLvUI$OnRefreshListener mOnRefreshListener -> p
    void initFooter() -> b
    void initHeader() -> c
    java.lang.String getLastUpdateTime() -> getLastUpdateTime
    void initAnimation() -> d
    void measureView(android.view.View) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void onRefreshFinish() -> a
    void refreshHeaderViewState() -> e
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void setOnRefreshListener(com.aoeng.degu.ui.lvs.UpDownLvUI$OnRefreshListener) -> setOnRefreshListener
com.aoeng.degu.views.RefreshLV$DisplayMode -> com.aoeng.degu.views.e:
    com.aoeng.degu.views.RefreshLV$DisplayMode Pull_Down -> a
    com.aoeng.degu.views.RefreshLV$DisplayMode Release_Refresh -> b
    com.aoeng.degu.views.RefreshLV$DisplayMode Refreshing -> c
    com.aoeng.degu.views.RefreshLV$DisplayMode[] ENUM$VALUES -> d
    com.aoeng.degu.views.RefreshLV$DisplayMode[] values() -> values
    com.aoeng.degu.views.RefreshLV$DisplayMode valueOf(java.lang.String) -> valueOf
com.aoeng.degu.views.SlideView -> com.aoeng.degu.views.f:
    android.content.Context mContext -> a
    android.widget.LinearLayout mViewContent -> b
    android.widget.Scroller mScroller -> c
    com.aoeng.degu.views.SlideView$OnSlideListener mOnSlideListener -> d
    int mHolderWidth -> e
    int mLastX -> f
    int mLastY -> g
    void initView() -> b
    void setButtonText(java.lang.CharSequence) -> setButtonText
    void setContentView(android.view.View) -> setContentView
    void setOnSlideListener(com.aoeng.degu.views.SlideView$OnSlideListener) -> setOnSlideListener
    void shrink() -> a
    void onRequireTouchEvent(android.view.MotionEvent) -> a
    void smoothScrollTo(int,int) -> a
    void computeScroll() -> computeScroll
com.aoeng.degu.views.SlideView$OnSlideListener -> com.aoeng.degu.views.g:
    void onSlide(android.view.View,int) -> a
com.aoeng.degu.views.StickyLayout -> com.aoeng.degu.views.StickyLayout:
    android.view.View mHeader -> a
    android.view.View mContent -> b
    com.aoeng.degu.views.StickyLayout$OnGiveUpTouchEventListener mGiveUpTouchEventListener -> c
    int mOriginalHeaderHeight -> d
    int mHeaderHeight -> e
    int mStatus -> f
    int mTouchSlop -> g
    int mLastX -> h
    int mLastY -> i
    int mLastXIntercept -> j
    int mLastYIntercept -> k
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void initData() -> a
    void setOnGiveUpTouchEventListener(com.aoeng.degu.views.StickyLayout$OnGiveUpTouchEventListener) -> setOnGiveUpTouchEventListener
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void smoothSetHeaderHeight(int,int,long) -> a
    void setHeaderHeight(int) -> setHeaderHeight
    void access$0(com.aoeng.degu.views.StickyLayout,int) -> a
com.aoeng.degu.views.StickyLayout$1 -> com.aoeng.degu.views.h:
    com.aoeng.degu.views.StickyLayout this$0 -> a
    int val$frameCount -> b
    int val$to -> c
    int val$from -> d
    float val$partation -> e
    void run() -> run
    com.aoeng.degu.views.StickyLayout access$0(com.aoeng.degu.views.StickyLayout$1) -> a
com.aoeng.degu.views.StickyLayout$1$1 -> com.aoeng.degu.views.i:
    com.aoeng.degu.views.StickyLayout$1 this$1 -> a
    int val$height -> b
    void run() -> run
com.aoeng.degu.views.StickyLayout$OnGiveUpTouchEventListener -> com.aoeng.degu.views.j:
    boolean giveUpTouchEvent(android.view.MotionEvent) -> a
com.aoeng.degu.views.SvgImageView -> com.aoeng.degu.views.SvgImageView:
    int mSvgRawResourceId -> b
    void sharedConstructor(android.content.Context,android.util.AttributeSet) -> a
    android.graphics.Bitmap getBitmap(android.content.Context,int,int,int) -> a
    android.graphics.Bitmap getBitmap() -> getBitmap
com.baidu.location.BDLocation -> com.baidu.location.a:
    int if -> c
    java.lang.String d -> d
    double else -> e
    double for -> f
    boolean c -> g
    double e -> h
    boolean int -> i
    float new -> j
    boolean try -> k
    float long -> l
    boolean b -> m
    int do -> n
    float char -> o
    java.lang.String goto -> p
    java.lang.String byte -> q
    boolean void -> r
    boolean case -> s
    java.lang.String a -> t
    java.lang.String mServerString -> a
    com.baidu.location.BDLocation$a mAddr -> b
    java.lang.String getTime() -> a
    void setTime(java.lang.String) -> a
    double getLatitude() -> b
    void setLatitude(double) -> a
    double getLongitude() -> c
    void setLongitude(double) -> b
    float getSpeed() -> d
    void setSpeed(float) -> a
    float getRadius() -> e
    void setRadius(float) -> b
    void setAddrStr(java.lang.String) -> b
    void setLocType(int) -> a
    int getLocType() -> f
    void setSatelliteNumber(int) -> b
    int getSatelliteNumber() -> g
    void setDerect(float) -> c
    java.lang.String getPoi() -> h
    java.lang.String getAddrStr() -> i
    java.lang.String getProvince() -> j
    java.lang.String getCity() -> k
    java.lang.String getCityCode() -> l
    java.lang.String getDistrict() -> m
    java.lang.String getStreet() -> n
com.baidu.location.BDLocation$a -> com.baidu.location.b:
    java.lang.String if -> a
    java.lang.String new -> b
    java.lang.String int -> c
    java.lang.String byte -> d
    java.lang.String do -> e
    java.lang.String for -> f
    java.lang.String try -> g
    com.baidu.location.BDLocation a -> h
com.baidu.location.BDLocationListener -> com.baidu.location.c:
    void onReceiveLocation(com.baidu.location.BDLocation) -> a
    void onReceivePoi(com.baidu.location.BDLocation) -> b
com.baidu.location.BDNotifyListener -> com.baidu.location.d:
    double mLatitude -> a
    double mLongitude -> b
    float mRadius -> c
    float differDistance -> d
    java.lang.String mCoorType -> e
    double mLatitudeC -> f
    double mLongitudeC -> g
    int Notified -> h
    boolean isAdded -> i
    com.baidu.location.i mNotifyCache -> j
    void onNotify(com.baidu.location.BDLocation,float) -> a
com.baidu.location.Jni -> com.baidu.location.Jni:
    int new -> a
    int for -> b
    int byte -> c
    int a -> d
    int do -> e
    int try -> f
    int int -> g
    int if -> h
    java.lang.String a(byte[],int) -> a
    java.lang.String b(double,double,int,int) -> b
    java.lang.String if(java.lang.String) -> a
    double[] if(double,double,java.lang.String) -> a
com.baidu.location.LocationClient -> com.baidu.location.e:
    java.lang.String e -> a
    long q -> b
    long char -> c
    java.lang.String y -> d
    com.baidu.location.LocationClientOption l -> e
    boolean p -> f
    android.content.Context j -> g
    android.os.Messenger k -> h
    com.baidu.location.LocationClient$a do -> i
    android.os.Messenger i -> j
    java.util.ArrayList A -> k
    com.baidu.location.BDLocation w -> l
    boolean d -> m
    boolean u -> n
    boolean g -> o
    com.baidu.location.LocationClient$b byte -> p
    boolean a -> q
    boolean int -> r
    java.lang.Object new -> s
    com.baidu.location.i else -> t
    boolean v -> u
    com.baidu.location.BDLocationListener c -> v
    java.lang.String t -> w
    java.lang.Boolean long -> x
    java.lang.Boolean case -> y
    android.content.ServiceConnection s -> z
    void setLocOption(com.baidu.location.LocationClientOption) -> a
    void requestNotifyLocation() -> a
    java.lang.String getVersion() -> b
    void start() -> c
    void for() -> e
    void stop() -> d
    void int() -> f
    void onRegisterNotify(android.os.Message) -> a
    void onRemoveNotifyEvent(android.os.Message) -> b
    void if(android.os.Message) -> d
    android.os.Bundle if() -> g
    android.os.Bundle a() -> h
    void registerNotifyLocationListener(com.baidu.location.BDLocationListener) -> a
    void onRegisterNotifyLocationListener(android.os.Message) -> c
    void registerLocationListener(com.baidu.location.BDLocationListener) -> b
    void for(android.os.Message) -> e
    void a(android.os.Message) -> f
    void new() -> i
    void try() -> j
    void do() -> k
    void a(android.os.Message,int) -> a
    void do(android.os.Message) -> g
    void a(int) -> a
    android.os.Messenger a(com.baidu.location.LocationClient,android.os.Messenger) -> a
    android.os.Messenger char(com.baidu.location.LocationClient) -> a
    android.os.Messenger try(com.baidu.location.LocationClient) -> b
    android.os.Bundle for(com.baidu.location.LocationClient) -> c
    boolean a(com.baidu.location.LocationClient,boolean) -> a
    boolean do(com.baidu.location.LocationClient,boolean) -> b
    com.baidu.location.LocationClientOption byte(com.baidu.location.LocationClient) -> d
    com.baidu.location.LocationClient$a new(com.baidu.location.LocationClient) -> e
    java.lang.Object do(com.baidu.location.LocationClient) -> f
    boolean for(com.baidu.location.LocationClient,boolean) -> c
    java.util.ArrayList else(com.baidu.location.LocationClient) -> g
    void for(com.baidu.location.LocationClient,android.os.Message) -> a
    void if(com.baidu.location.LocationClient,android.os.Message) -> b
    void a(com.baidu.location.LocationClient,android.os.Message) -> c
    void goto(com.baidu.location.LocationClient) -> h
    void if(com.baidu.location.LocationClient) -> i
    void case(com.baidu.location.LocationClient) -> j
    void a(com.baidu.location.LocationClient) -> k
    void int(com.baidu.location.LocationClient) -> l
    boolean if(com.baidu.location.LocationClient,boolean) -> d
    void a(com.baidu.location.LocationClient,android.os.Message,int) -> a
    void do(com.baidu.location.LocationClient,android.os.Message) -> d
com.baidu.location.LocationClient$1 -> com.baidu.location.g:
    com.baidu.location.LocationClient a -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.baidu.location.LocationClient$a -> com.baidu.location.h:
    com.baidu.location.LocationClient a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.LocationClient$b -> com.baidu.location.j:
    com.baidu.location.LocationClient a -> a
    void run() -> run
com.baidu.location.LocationClientOption -> com.baidu.location.k:
    java.lang.String try -> a
    java.lang.String char -> b
    boolean case -> c
    int int -> d
    int long -> e
    java.lang.String new -> f
    int goto -> g
    boolean void -> h
    boolean for -> i
    boolean else -> j
    boolean if -> k
    float do -> l
    int a -> m
    java.lang.String byte -> n
    boolean equals(com.baidu.location.LocationClientOption) -> a
    void setCoorType(java.lang.String) -> a
    void setOpenGps(boolean) -> a
    void setScanSpan(int) -> a
    void setProdName(java.lang.String) -> b
    void setPriority(int) -> b
    boolean isDisableCache() -> a
com.baidu.location.a -> com.baidu.location.l:
    java.lang.String if -> a
    java.util.ArrayList do -> b
    android.os.Handler int -> c
    boolean for -> d
    boolean a -> e
    boolean for() -> a
    void for(android.os.Message) -> a
    void if(android.os.Message) -> b
    void int(android.os.Message) -> c
    java.lang.String a(android.os.Message) -> d
    void a(java.lang.String,int) -> a
    void a(java.lang.String) -> a
    void if(java.lang.String) -> b
    void a(java.lang.String,android.os.Message) -> a
    java.lang.String try() -> b
    int do(android.os.Message) -> e
    com.baidu.location.a$a a(android.os.Messenger) -> a
    void a(com.baidu.location.a$a) -> a
    void do() -> d
    void int() -> e
    void a() -> f
    void new() -> c
com.baidu.location.a$a -> com.baidu.location.m:
    java.lang.String for -> a
    android.os.Messenger do -> b
    com.baidu.location.LocationClientOption if -> c
    com.baidu.location.a a -> d
    void if(java.lang.String) -> a
    void a(java.lang.String,int) -> a
    void a(java.lang.String) -> b
    void if() -> a
    void a(int) -> a
    void a(int,java.lang.String,java.lang.String) -> a
    void a(com.baidu.location.a$a,int) -> a
com.baidu.location.b -> com.baidu.location.n:
    long m -> a
    android.content.Context g -> b
    android.location.LocationManager o -> c
    android.location.Location l -> d
    com.baidu.location.b$b k -> e
    android.location.GpsStatus void -> f
    com.baidu.location.b$a b -> g
    int i -> h
    long c -> i
    long new -> j
    boolean a -> k
    android.os.Handler for -> l
    boolean case -> m
    java.lang.String try -> n
    boolean h -> o
    long j -> p
    int int -> q
    boolean byte -> r
    boolean e -> s
    java.util.List n -> t
    java.lang.String p -> u
    java.lang.String do -> v
    java.lang.String if -> w
    java.lang.String d -> x
    void int() -> a
    void a() -> b
    java.lang.String if(android.location.Location) -> a
    java.lang.String if() -> c
    android.location.Location do() -> d
    boolean try() -> e
    boolean case() -> f
    boolean a(android.location.Location,android.location.Location) -> a
    void a(android.location.Location) -> b
    void a(boolean) -> a
    java.lang.String byte() -> g
    void a(com.baidu.location.b,android.location.Location) -> a
    boolean do(com.baidu.location.b,boolean) -> a
    boolean a(com.baidu.location.b) -> a
    void a(com.baidu.location.b,boolean) -> b
    long a(com.baidu.location.b,long) -> a
    android.location.LocationManager byte(com.baidu.location.b) -> b
    android.location.GpsStatus new(com.baidu.location.b) -> c
    android.location.GpsStatus a(com.baidu.location.b,android.location.GpsStatus) -> a
    int for() -> h
    long do(com.baidu.location.b,long) -> b
    int a(int) -> a
    long for(com.baidu.location.b) -> d
    boolean case(com.baidu.location.b) -> e
    java.util.List try(com.baidu.location.b) -> f
    java.lang.String if(com.baidu.location.b) -> g
    java.lang.String do(com.baidu.location.b) -> h
    java.lang.String int(com.baidu.location.b) -> i
    java.lang.String a(java.lang.String) -> a
    java.lang.String do(com.baidu.location.b,java.lang.String) -> a
    java.lang.String if(com.baidu.location.b,java.lang.String) -> b
    java.lang.String a(com.baidu.location.b,java.lang.String) -> c
    boolean if(com.baidu.location.b,boolean) -> c
    long if(com.baidu.location.b,long) -> c
com.baidu.location.b$1 -> com.baidu.location.o:
com.baidu.location.b$a -> com.baidu.location.p:
    com.baidu.location.b a -> a
    void onGpsStatusChanged(int) -> onGpsStatusChanged
    void onNmeaReceived(long,java.lang.String) -> onNmeaReceived
com.baidu.location.b$b -> com.baidu.location.q:
    com.baidu.location.b a -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
com.baidu.location.b$c -> com.baidu.location.r:
    boolean h -> c
    java.lang.String try -> d
    boolean q -> e
    java.lang.String p -> f
    double d -> g
    double new -> h
    double else -> i
    int c -> j
    int for -> k
    java.lang.String A -> l
    boolean k -> m
    java.lang.String v -> n
    char char -> o
    double n -> p
    double z -> q
    java.lang.String r -> r
    boolean s -> s
    int C -> t
    double B -> u
    double j -> v
    double long -> w
    java.util.List m -> x
    boolean i -> y
    java.util.List u -> z
    int o -> A
    int void -> B
    int a -> C
    double byte -> D
    double e -> E
    double case -> F
    double f -> G
    int int -> H
    int b -> I
    int do -> J
    int goto -> K
    int w -> L
    int t -> a
    com.baidu.location.b y -> b
    void void() -> a
    boolean a(java.lang.String) -> a
    int c() -> b
    int a(boolean,boolean,boolean,boolean,boolean) -> a
    double[] a(java.util.List) -> a
    double[] if(double,double) -> a
    double[] a(double,double) -> b
    boolean if() -> c
    double l() -> d
    double d() -> e
    double try() -> f
    double case() -> g
    double j() -> h
    double b() -> i
    double a() -> j
    int goto() -> k
com.baidu.location.b$c$a -> com.baidu.location.s:
    int int -> b
    int a -> c
    int if -> d
    int do -> e
    com.baidu.location.b$c for -> a
    int a() -> a
    int if() -> b
    int do() -> c
com.baidu.location.c -> com.baidu.location.t:
    java.lang.String else -> a
    android.content.Context if -> b
    android.telephony.TelephonyManager try -> c
    com.baidu.location.c$a a -> d
    java.util.List new -> e
    java.lang.String byte -> f
    android.os.Handler do -> g
    com.baidu.location.c$b int -> h
    boolean void -> i
    java.lang.reflect.Method goto -> j
    java.lang.reflect.Method case -> k
    java.lang.reflect.Method for -> l
    java.lang.Class c -> m
    long long -> n
    int b -> o
    boolean char -> p
    void do() -> a
    void byte() -> b
    int new() -> c
    boolean if() -> f
    com.baidu.location.c$a a() -> d
    void a(android.telephony.CellLocation) -> a
    java.lang.String a(boolean) -> a
    long try() -> e
    com.baidu.location.c$a for(com.baidu.location.c) -> a
    java.util.List do(com.baidu.location.c) -> b
    android.telephony.TelephonyManager if(com.baidu.location.c) -> c
    void a(com.baidu.location.c,android.telephony.CellLocation) -> a
    android.os.Handler a(com.baidu.location.c) -> d
com.baidu.location.c$a -> com.baidu.location.u:
    int for -> a
    int try -> b
    int do -> c
    int if -> d
    long byte -> e
    int int -> f
    char new -> g
    com.baidu.location.c a -> h
    boolean a(com.baidu.location.c$a) -> a
    boolean if() -> a
    boolean do() -> b
    java.lang.String toString() -> toString
    java.lang.String a() -> c
    java.lang.String for() -> d
com.baidu.location.c$b -> com.baidu.location.v:
    com.baidu.location.c a -> a
    void onCellLocationChanged(android.telephony.CellLocation) -> onCellLocationChanged
    void onSignalStrengthsChanged(android.telephony.SignalStrength) -> onSignalStrengthsChanged
com.baidu.location.e -> com.baidu.location.w:
    java.lang.String new -> a
    long e -> b
    long int -> c
    long a -> d
    float char -> e
    android.content.Context goto -> f
    android.os.Handler if -> g
    android.net.wifi.WifiManager long -> h
    com.baidu.location.e$b case -> i
    com.baidu.location.e$a b -> j
    com.baidu.location.e$c byte -> k
    long void -> l
    boolean for -> m
    java.lang.Object f -> n
    java.lang.reflect.Method d -> o
    boolean do -> p
    boolean c -> q
    boolean else -> r
    void int() -> a
    void try() -> b
    void case() -> c
    boolean for() -> d
    java.lang.String byte() -> e
    com.baidu.location.e$c do() -> f
    com.baidu.location.e$c new() -> g
    void if() -> i
    void char() -> j
    boolean do(com.baidu.location.e) -> a
    android.os.Handler if(com.baidu.location.e) -> b
    void for(com.baidu.location.e) -> c
    void a(com.baidu.location.e) -> d
    java.lang.String a() -> h
com.baidu.location.e$1 -> com.baidu.location.x:
com.baidu.location.e$a -> com.baidu.location.y:
    com.baidu.location.e a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.e$b -> com.baidu.location.z:
    com.baidu.location.e a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.e$c -> com.baidu.location.aa:
    java.util.List do -> a
    long if -> c
    long for -> d
    com.baidu.location.e a -> b
    java.lang.String do() -> a
    int int() -> b
    java.lang.String try() -> c
    java.lang.String new() -> d
    java.lang.String a(int) -> a
    java.lang.String byte() -> e
    void a() -> h
    java.lang.String if(int) -> b
    boolean if(com.baidu.location.e$c) -> a
    boolean a(com.baidu.location.e$c) -> b
    boolean a(com.baidu.location.e$c,com.baidu.location.e$c,float) -> a
    boolean if() -> f
    boolean for() -> g
com.baidu.location.e$d -> com.baidu.location.ab:
    com.baidu.location.e a -> a
    void run() -> run
com.baidu.location.f -> com.baidu.location.f:
    java.lang.String O -> a
    android.os.Handler do -> b
    android.os.Messenger n -> c
    com.baidu.location.c L -> d
    com.baidu.location.b D -> e
    com.baidu.location.e k -> f
    com.baidu.location.a H -> g
    com.baidu.location.e$c B -> h
    com.baidu.location.e$c b -> i
    com.baidu.location.e$c for -> j
    com.baidu.location.c$a M -> k
    com.baidu.location.c$a q -> l
    com.baidu.location.c$a long -> m
    android.location.Location G -> n
    java.lang.String h -> o
    java.lang.String T -> p
    java.lang.String void -> q
    boolean else -> r
    boolean new -> s
    boolean F -> t
    boolean r -> u
    long i -> v
    long v -> w
    void onCreate() -> onCreate
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void do(android.os.Message) -> a
    void new(android.os.Message) -> b
    void try(android.os.Message) -> c
    void a() -> a
    void if(android.os.Message) -> d
    void a(android.os.Message) -> e
    void try() -> b
    void if() -> c
    void case() -> d
    void for() -> e
    java.lang.String a(java.lang.String) -> a
    void byte() -> f
    boolean a(com.baidu.location.e$c) -> a
    boolean a(com.baidu.location.c$a) -> a
    void for(android.os.Message) -> f
    void int(android.os.Message) -> g
    void int() -> g
    void a(android.os.Message,int) -> a
    void do() -> h
    void char() -> i
    void a(int) -> a
    void new() -> j
    boolean do(com.baidu.location.f) -> a
    boolean a(com.baidu.location.f,boolean) -> a
    void case(com.baidu.location.f) -> b
    boolean if(com.baidu.location.f) -> c
    void do(com.baidu.location.f,android.os.Message) -> a
    void a(com.baidu.location.f,android.os.Message) -> b
    void new(com.baidu.location.f,android.os.Message) -> c
    void a(com.baidu.location.f,android.os.Message,int) -> a
    void int(com.baidu.location.f,android.os.Message) -> d
    void byte(com.baidu.location.f) -> d
    void new(com.baidu.location.f) -> e
    void for(com.baidu.location.f,android.os.Message) -> e
    void for(com.baidu.location.f) -> f
    void if(com.baidu.location.f,android.os.Message) -> f
    void try(com.baidu.location.f,android.os.Message) -> g
    void try(com.baidu.location.f) -> g
    void a(com.baidu.location.f) -> h
    void int(com.baidu.location.f) -> i
    void char(com.baidu.location.f) -> j
    void a(com.baidu.location.f,int) -> a
com.baidu.location.f$1 -> com.baidu.location.ac:
com.baidu.location.f$a -> com.baidu.location.ad:
    com.baidu.location.f a -> a
    void run() -> run
com.baidu.location.f$b -> com.baidu.location.ae:
    com.baidu.location.f a -> a
    void handleMessage(android.os.Message) -> handleMessage
com.baidu.location.g -> com.baidu.location.af:
    java.lang.String new -> a
    int long -> b
    int else -> c
    java.lang.String g -> d
    java.lang.String void -> e
    java.lang.String do -> f
    java.lang.String for -> g
    boolean e -> h
    boolean char -> i
    boolean goto -> j
    java.util.ArrayList b -> k
    int a -> l
    android.net.Uri if -> m
    int try -> n
    java.lang.String f -> o
    int c -> p
    android.os.Handler int -> q
    android.os.Handler h -> r
    boolean a(java.lang.String,android.os.Handler) -> a
    boolean if(java.lang.String,android.os.Handler) -> b
    void else() -> a
    boolean if(android.content.Context) -> a
    int do(android.content.Context) -> b
    int for(android.content.Context) -> c
    int for() -> b
    java.lang.String long() -> c
    java.lang.String case() -> d
    int goto() -> e
    int a() -> f
    java.lang.String try() -> g
    int do() -> h
    java.lang.String char() -> i
    android.os.Handler byte() -> j
    java.lang.String a(java.lang.String) -> a
    android.os.Handler if(android.os.Handler) -> a
    boolean if(boolean) -> a
    java.lang.String new() -> k
    java.lang.String void() -> l
    android.os.Handler if() -> m
    android.os.Handler a(android.os.Handler) -> b
    boolean a(boolean) -> b
    java.util.ArrayList int() -> n
    java.util.ArrayList a(java.util.ArrayList) -> a
    boolean do(boolean) -> c
com.baidu.location.g$1 -> com.baidu.location.ag:
    void run() -> run
com.baidu.location.g$2 -> com.baidu.location.ah:
    void run() -> run
com.baidu.location.g$3 -> com.baidu.location.ai:
    void run() -> run
com.baidu.location.h -> com.baidu.location.aj:
    java.lang.String if -> a
    int a -> b
    long try -> c
    int new -> d
    float for -> e
    java.lang.String do -> f
    java.util.ArrayList int -> g
    void a(com.baidu.location.c$a,double,double,float) -> a
    java.lang.String a(int,int,int) -> a
    void if() -> a
    com.baidu.location.h$a if(int,int,int) -> b
    void a() -> b
    void do() -> c
com.baidu.location.h$a -> com.baidu.location.ak:
    int do -> a
    int try -> b
    int if -> c
    int a -> d
    double new -> e
    double int -> f
    float for -> g
    boolean a(int,int,int) -> a
    double a(com.baidu.location.h$a,double) -> a
    double if(com.baidu.location.h$a,double) -> b
    float a(com.baidu.location.h$a,float) -> a
    double if(com.baidu.location.h$a) -> a
    double int(com.baidu.location.h$a) -> b
    float a(com.baidu.location.h$a) -> c
    int for(com.baidu.location.h$a) -> d
    int new(com.baidu.location.h$a) -> e
    int do(com.baidu.location.h$a) -> f
    int try(com.baidu.location.h$a) -> g
com.baidu.location.i -> com.baidu.location.i:
    java.lang.String do -> a
    java.util.ArrayList byte -> b
    float goto -> c
    com.baidu.location.BDLocation case -> d
    long b -> e
    com.baidu.location.LocationClient d -> f
    android.content.Context if -> g
    int a -> h
    long char -> i
    boolean void -> j
    boolean long -> k
    android.app.PendingIntent try -> l
    android.app.AlarmManager for -> m
    com.baidu.location.i$b else -> n
    com.baidu.location.i$a int -> o
    boolean c -> p
    void if() -> a
    int if(com.baidu.location.BDNotifyListener) -> a
    int do(com.baidu.location.BDNotifyListener) -> b
    boolean do() -> b
    void a() -> c
    void a(long) -> a
    void a(com.baidu.location.BDLocation) -> a
    void a(com.baidu.location.i,com.baidu.location.BDLocation) -> a
    java.lang.String a(com.baidu.location.i) -> a
    java.util.ArrayList do(com.baidu.location.i) -> b
    com.baidu.location.LocationClient if(com.baidu.location.i) -> c
com.baidu.location.i$a -> com.baidu.location.al:
    com.baidu.location.i a -> a
    void onReceiveLocation(com.baidu.location.BDLocation) -> a
    void onReceivePoi(com.baidu.location.BDLocation) -> b
com.baidu.location.i$b -> com.baidu.location.i$b:
    com.baidu.location.i a -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.baidu.location.j -> com.baidu.location.am:
    boolean do -> a
    boolean c -> b
    int new -> c
    int for -> d
    float case -> e
    float if -> f
    float char -> g
    boolean void -> h
    boolean try -> i
    boolean b -> j
    int long -> k
    java.lang.String a -> l
    java.lang.String int -> m
    boolean else -> n
    boolean byte -> o
    java.lang.Process goto -> p
    int if(java.lang.String,java.lang.String,java.lang.String) -> a
    float a(java.lang.String,java.lang.String,java.lang.String) -> b
    double do(java.lang.String,java.lang.String,java.lang.String) -> c
    java.lang.String a(java.lang.String,java.lang.String,java.lang.String,double) -> a
    java.lang.String a() -> a
    java.lang.String a(com.baidu.location.c$a,com.baidu.location.e$c,android.location.Location,java.lang.String,int) -> a
    void for() -> b
    void int() -> c
    void a(java.lang.String,java.lang.String) -> a
    void if(java.lang.String,java.lang.String) -> b
    boolean a(java.lang.String) -> a
    void if(java.lang.String) -> b
    java.lang.String do() -> d
com.baidu.location.k -> com.baidu.location.an:
    java.lang.String else -> a
    java.util.ArrayList void -> b
    java.util.ArrayList try -> c
    java.util.ArrayList f -> d
    java.lang.String h -> e
    java.io.File c -> f
    int char -> g
    int if -> h
    int i -> i
    int case -> j
    int j -> k
    int g -> l
    double e -> m
    double a -> n
    double long -> o
    double d -> p
    int new -> q
    int b -> r
    int int -> s
    android.location.Location goto -> t
    android.location.Location byte -> u
    android.location.Location do -> v
    com.baidu.location.e$c for -> w
    java.lang.String a() -> a
    void a(com.baidu.location.c$a,com.baidu.location.e$c,android.location.Location,java.lang.String) -> a
    void a(double,double,double,double) -> a
    void if() -> b
    boolean if(android.location.Location) -> a
    boolean a(android.location.Location) -> b
    boolean a(android.location.Location,com.baidu.location.e$c) -> a
    void if(java.lang.String) -> a
    void a(java.lang.String) -> b
    void do(java.lang.String) -> c
    int a(int,int,int,long) -> a
    int if(java.util.List,int) -> a
    int a(java.util.List,int) -> b
    boolean a(int,int,int,int,long) -> a
    void a(com.baidu.location.c$a,com.baidu.location.e$c,java.lang.String,double,double,java.lang.String) -> a
